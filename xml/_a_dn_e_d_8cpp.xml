<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_a_dn_e_d_8cpp" kind="file" language="C++">
    <compoundname>ADnED.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="yes">dirent.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">syscall.h</includes>
    <includes local="no">epicsTime.h</includes>
    <includes local="no">epicsThread.h</includes>
    <includes local="no">epicsExport.h</includes>
    <includes local="no">epicsString.h</includes>
    <includes local="no">iocsh.h</includes>
    <includes local="no">drvSup.h</includes>
    <includes local="no">registryFunction.h</includes>
    <includes refid="_a_dn_e_d_8h" local="yes">ADnED.h</includes>
    <includes refid="n_e_d_channel_8h" local="yes">nEDChannel.h</includes>
    <includes refid="_a_dn_e_d_file_8h" local="yes">ADnEDFile.h</includes>
    <includes refid="_a_dn_e_d_transform_8h" local="yes">ADnEDTransform.h</includes>
    <includes local="no">pv/pvData.h</includes>
    <incdepgraph>
      <node id="25">
        <label>sys/stat.h</label>
      </node>
      <node id="50">
        <label>pv/createRequest.h</label>
      </node>
      <node id="12">
        <label>iocsh.h</label>
      </node>
      <node id="18">
        <label>stdarg.h</label>
      </node>
      <node id="51">
        <label>pv/event.h</label>
      </node>
      <node id="27">
        <label>epicsTypes.h</label>
      </node>
      <node id="38">
        <label>NDArray.h</label>
        <link refid="_n_d_array_8h"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>nEDChannel.h</label>
        <link refid="n_e_d_channel_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>ADnEDFile.h</label>
        <link refid="_a_dn_e_d_file_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cantProceed.h</label>
      </node>
      <node id="45">
        <label>NDAttributeList.h</label>
        <link refid="_n_d_attribute_list_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdlib.h</label>
      </node>
      <node id="29">
        <label>epicsMutex.h</label>
      </node>
      <node id="57">
        <label>ADnEDGlobals.h</label>
        <link refid="_a_dn_e_d_globals_8h"/>
      </node>
      <node id="21">
        <label>errno.h</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
      <node id="24">
        <label>fcntl.h</label>
      </node>
      <node id="53">
        <label>pv/clientFactory.h</label>
      </node>
      <node id="14">
        <label>registryFunction.h</label>
      </node>
      <node id="44">
        <label>epicsVersion.h</label>
      </node>
      <node id="33">
        <label>pv/pvTimeStamp.h</label>
      </node>
      <node id="15">
        <label>ADnED.h</label>
        <link refid="_a_dn_e_d_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="13">
        <label>drvSup.h</label>
      </node>
      <node id="9">
        <label>epicsThread.h</label>
      </node>
      <node id="16">
        <label>stddef.h</label>
      </node>
      <node id="54">
        <label>pv/pvAccess.h</label>
      </node>
      <node id="10">
        <label>epicsExport.h</label>
      </node>
      <node id="34">
        <label>ADDriver.h</label>
        <link refid="_a_d_driver_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>ADCoreVersion.h</label>
        <link refid="_a_d_core_version_8h"/>
      </node>
      <node id="43">
        <label>ADCoreAPI.h</label>
        <link refid="_a_d_core_a_p_i_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>asynNDArrayDriver.h</label>
        <link refid="asyn_n_d_array_driver_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>sys/types.h</label>
      </node>
      <node id="11">
        <label>epicsString.h</label>
      </node>
      <node id="22">
        <label>string.h</label>
      </node>
      <node id="26">
        <label>unistd.h</label>
      </node>
      <node id="52">
        <label>pv/pvData.h</label>
      </node>
      <node id="58">
        <label>ADnEDTransformBase.h</label>
        <link refid="_a_dn_e_d_transform_base_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>ellLib.h</label>
      </node>
      <node id="7">
        <label>syscall.h</label>
      </node>
      <node id="56">
        <label>ADnEDTransform.h</label>
        <link refid="_a_dn_e_d_transform_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>NDAttribute.h</label>
        <link refid="_n_d_attribute_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>asynDriver.h</label>
      </node>
      <node id="19">
        <label>math.h</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="49">
        <label>pv/epicsException.h</label>
      </node>
      <node id="23">
        <label>ctype.h</label>
      </node>
      <node id="46">
        <label>Codec.h</label>
        <link refid="_codec_8h"/>
      </node>
      <node id="8">
        <label>epicsTime.h</label>
      </node>
      <node id="37">
        <label>asynPortDriver.h</label>
      </node>
      <node id="30">
        <label>epicsStdio.h</label>
      </node>
      <node id="39">
        <label>set</label>
      </node>
      <node id="35">
        <label>epicsMessageQueue.h</label>
      </node>
      <node id="55">
        <label>pv/monitor.h</label>
      </node>
      <node id="20">
        <label>stdio.h</label>
      </node>
      <node id="32">
        <label>asynOctetSyncIO.h</label>
      </node>
      <node id="28">
        <label>epicsEvent.h</label>
      </node>
      <node id="1">
        <label>/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp</label>
        <link refid="_a_dn_e_d_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1a530816c9215548ab109b6590864e361e" prot="public" static="yes" mutable="no">
        <type>const iocshArg</type>
        <definition>const iocshArg ADnEDConfigArg0</definition>
        <argsstring></argsstring>
        <name>ADnEDConfigArg0</name>
        <initializer>= {&quot;Port name&quot;, iocshArgString}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1863" column="25" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1863" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1ac505eb2e65551a7e6cf4f048dc51fc68" prot="public" static="yes" mutable="no">
        <type>const iocshArg</type>
        <definition>const iocshArg ADnEDConfigArg1</definition>
        <argsstring></argsstring>
        <name>ADnEDConfigArg1</name>
        <initializer>= {&quot;Max Buffers&quot;, iocshArgInt}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1864" column="25" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1a80af032427692012ea140053ecf9187a" prot="public" static="yes" mutable="no">
        <type>const iocshArg</type>
        <definition>const iocshArg ADnEDConfigArg2</definition>
        <argsstring></argsstring>
        <name>ADnEDConfigArg2</name>
        <initializer>= {&quot;Max Memory&quot;, iocshArgInt}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1865" column="25" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1a8deb1c3570369c6cd001a7d74a4383f7" prot="public" static="yes" mutable="no">
        <type>const iocshArg</type>
        <definition>const iocshArg ADnEDConfigArg3</definition>
        <argsstring></argsstring>
        <name>ADnEDConfigArg3</name>
        <initializer>= {&quot;Debug&quot;, iocshArgInt}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1866" column="25" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1a08a9054199a8d90159c2f6ec5b53fe1b" prot="public" static="yes" mutable="no">
        <type>const iocshArg *const</type>
        <definition>const iocshArg* const ADnEDConfigArgs[]</definition>
        <argsstring>[]</argsstring>
        <name>ADnEDConfigArgs</name>
        <initializer>=  {&amp;ADnEDConfigArg0,
                                                         &amp;ADnEDConfigArg1,
                                                         &amp;ADnEDConfigArg2,
                                                         &amp;ADnEDConfigArg3}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1867" column="32" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1a04d079a67df2220c70dce3e773c332cd" prot="public" static="yes" mutable="no">
        <type>const iocshFuncDef</type>
        <definition>const iocshFuncDef configADnED</definition>
        <argsstring></argsstring>
        <name>configADnED</name>
        <initializer>= {&quot;ADnEDConfig&quot;, 4, ADnEDConfigArgs}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1872" column="29" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_dn_e_d_8cpp_1af61d1085646d9c751504ec835c35eadd" prot="public" static="yes" mutable="no">
        <type>const iocshFuncDef</type>
        <definition>const iocshFuncDef configADnEDCreateFactory</definition>
        <argsstring></argsstring>
        <name>configADnEDCreateFactory</name>
        <initializer>= {&quot;ADnEDCreateFactory&quot;, 0, NULL}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1878" column="29" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1878" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1ab5c18d2cf9c15119e4551ec535fa8f94" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ADnEDEventTaskC</definition>
        <argsstring>(void *drvPvt)</argsstring>
        <name>ADnEDEventTaskC</name>
        <param>
          <type>void *</type>
          <declname>drvPvt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1642" column="13" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1642" bodyend="1647" declfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1a5c2c7b676cc9ed286a61b767e8cbb81c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ADnEDFrameTaskC</definition>
        <argsstring>(void *drvPvt)</argsstring>
        <name>ADnEDFrameTaskC</name>
        <param>
          <type>void *</type>
          <declname>drvPvt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1811" column="13" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1811" bodyend="1816" declfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" declline="57" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1a28637cb7c3e2f68a18a7ed61b1441daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>asynStatus</type>
        <definition>asynStatus ADnEDConfig</definition>
        <argsstring>(const char *portName, int maxBuffers, size_t maxMemory, int debug)</argsstring>
        <name>ADnEDConfig</name>
        <param>
          <type>const char *</type>
          <declname>portName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxBuffers</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>maxMemory</declname>
        </param>
        <param>
          <type>int</type>
          <declname>debug</declname>
        </param>
        <briefdescription>
<para>The following functions have C linkage, and can be called directly or from iocsh. </para>
        </briefdescription>
        <detaileddescription>
<para>Config function for IOC shell. It instantiates an instance of the driver. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The Asyn port name to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBuffers</parametername>
</parameternamelist>
<parameterdescription>
<para>Used by asynPortDriver (set to -1 for unlimited) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxMemory</parametername>
</parameternamelist>
<parameterdescription>
<para>Used by asynPortDriver (set to -1 for unlimited) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debug</parametername>
</parameternamelist>
<parameterdescription>
<para>This debug flag is passed to xsp3_config in the Xspress API (0 or 1) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1834" column="14" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1834" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1ae955e86f28528f8c57867626eab4ce4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>asynStatus</type>
        <definition>asynStatus ADnEDCreateFactory</definition>
        <argsstring>()</argsstring>
        <name>ADnEDCreateFactory</name>
        <briefdescription>
<para>Config function for IOC shell. </para>
        </briefdescription>
        <detaileddescription>
<para>It instantiates a PVAccess client factory for this IOC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1852" column="14" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1852" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1aa732cb38d93e58f4b01fb442d9f0feef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void configADnEDCallFunc</definition>
        <argsstring>(const iocshArgBuf *args)</argsstring>
        <name>configADnEDCallFunc</name>
        <param>
          <type>const iocshArgBuf *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1873" column="15" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1873" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1a10fe59ccda0f559d733538abc35ea1d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void configADnEDCreateFactoryCallFunc</definition>
        <argsstring>(const iocshArgBuf *args)</argsstring>
        <name>configADnEDCreateFactoryCallFunc</name>
        <param>
          <type>const iocshArgBuf *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1879" column="15" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1879" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1a6d34fe52d4fd30aede79a5287619039a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ADnEDRegister</definition>
        <argsstring>(void)</argsstring>
        <name>ADnEDRegister</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1885" column="15" bodyfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" bodystart="1885" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="_a_dn_e_d_8cpp_1a35a7a730655af25228c04bb00f1002da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>epicsExportRegistrar</definition>
        <argsstring>(ADnEDRegister)</argsstring>
        <name>epicsExportRegistrar</name>
        <param>
          <type>ADnEDRegister</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" line="1891" column="3" declfile="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp" declline="1891" declcolumn="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dirent.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;syscall.h&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//Epics<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;epicsTime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;epicsThread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;epicsExport.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;epicsString.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iocsh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;drvSup.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;registryFunction.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//ADnED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_a_dn_e_d_8h" kindref="compound">ADnED.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="n_e_d_channel_8h" kindref="compound">nEDChannel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_a_dn_e_d_file_8h" kindref="compound">ADnEDFile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_a_dn_e_d_transform_8h" kindref="compound">ADnEDTransform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pv/pvData.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cerr;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::hex;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::tr1::shared_ptr;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classn_e_d_channel_1_1n_e_d_channel_requester" kindref="compound">nEDChannel::nEDChannelRequester</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classn_e_d_channel_1_1n_e_d_monitor_requester" kindref="compound">nEDChannel::nEDMonitorRequester</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//Definitions<sp/>of<sp/>static<sp/>class<sp/>data<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsInt32<sp/>ADnED::s_ADNED_MAX_STRING_SIZE<sp/>=<sp/><ref refid="_a_dn_e_d_globals_8h_1aaa377a53a531a4891bc98b066e929538" kindref="member">ADNED_MAX_STRING_SIZE</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsInt32<sp/>ADnED::s_ADNED_MAX_DETS<sp/>=<sp/><ref refid="_a_dn_e_d_globals_8h_1afbcd5cce64f43c1c4c309fbafc75d373" kindref="member">ADNED_MAX_DETS</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsInt32<sp/>ADnED::s_ADNED_MAX_CHANNELS<sp/>=<sp/><ref refid="_a_dn_e_d_globals_8h_1ab11af3b256decf9b21284fdd0dde9fbe" kindref="member">ADNED_MAX_CHANNELS</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_ALLOC_STATUS_OK<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_ALLOC_STATUS_REQ<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_ALLOC_STATUS_FAIL<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//These<sp/>2D<sp/>plot<sp/>options<sp/>need<sp/>to<sp/>match<sp/>the<sp/>mbbo<sp/>record<sp/>that<sp/>uses<sp/>ADNED_DET_2D_TYPE<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_2D_PLOT_XY<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_2D_PLOT_XTOF<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_2D_PLOT_YTOF<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>epicsUInt32<sp/>ADnED::s_ADNED_2D_PLOT_PIXELIDTOF<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//C<sp/>Function<sp/>prototypes<sp/>to<sp/>tie<sp/>in<sp/>with<sp/>EPICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnEDEventTaskC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*drvPvt);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnEDFrameTaskC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*drvPvt);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><ref refid="class_a_dn_e_d_1a9df0195bde063022f9eae9f3fb80ddfa" kindref="member">ADnED::ADnED</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*portName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxBuffers,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxMemory,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>:<sp/><ref refid="class_a_d_driver" kindref="compound">ADDriver</ref>(portName,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_ADNED_MAX_DETS+1,<sp/></highlight><highlight class="comment">/*<sp/>maxAddr<sp/>(different<sp/>detectors<sp/>use<sp/>different<sp/>asyn<sp/>address*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_dn_e_d_8h_1ace597520ed1c5ff9db3c04c308a456bf" kindref="member">NUM_DRIVER_PARAMS</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxBuffers,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxMemory,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynInt32Mask<sp/>|<sp/>asynInt32ArrayMask<sp/>|<sp/>asynFloat64Mask<sp/>|<sp/>asynFloat32ArrayMask<sp/>|<sp/>asynFloat64ArrayMask<sp/>|<sp/>asynDrvUserMask<sp/>|<sp/>asynOctetMask<sp/>|<sp/>asynGenericPointerMask,<sp/></highlight><highlight class="comment">/*<sp/>Interface<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynInt32Mask<sp/>|<sp/>asynInt32ArrayMask<sp/>|<sp/>asynFloat64Mask<sp/>|<sp/>asynFloat32ArrayMask<sp/>|<sp/>asynFloat64ArrayMask<sp/>|<sp/>asynOctetMask<sp/>|<sp/>asynGenericPointerMask,<sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupt<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASYN_CANBLOCK<sp/>|<sp/>ASYN_MULTIDEVICE,<sp/></highlight><highlight class="comment">/*<sp/>asynFlags.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/></highlight><highlight class="comment">/*<sp/>Autoconnect<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/></highlight><highlight class="comment">/*<sp/>default<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0),<sp/></highlight><highlight class="comment">/*<sp/>Default<sp/>stack<sp/>size*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>m_debug(debug)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::ADnED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>epicsEvent<sp/>for<sp/>signaling<sp/>the<sp/>threads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>will<sp/>cause<sp/>it<sp/>to<sp/>do<sp/>a<sp/>poll<sp/>immediately,<sp/>rather<sp/>than<sp/>wait<sp/>for<sp/>the<sp/>poll<sp/>time<sp/>period.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>m_startEvent<sp/>=<sp/>epicsEventMustCreate(epicsEventEmpty);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_startEvent)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>epicsEventCreate<sp/>failure<sp/>for<sp/>start<sp/>event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>m_stopEvent<sp/>=<sp/>epicsEventMustCreate(epicsEventEmpty);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_stopEvent)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>epicsEventCreate<sp/>failure<sp/>for<sp/>stop<sp/>event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>m_startFrame<sp/>=<sp/>epicsEventMustCreate(epicsEventEmpty);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_startFrame)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>epicsEventCreate<sp/>failure<sp/>for<sp/>start<sp/>frame.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>m_stopFrame<sp/>=<sp/>epicsEventMustCreate(epicsEventEmpty);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_stopFrame)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>epicsEventCreate<sp/>failure<sp/>for<sp/>stop<sp/>frame.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Add<sp/>the<sp/>params<sp/>to<sp/>the<sp/>paramLib<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//createParam<sp/>adds<sp/>the<sp/>parameters<sp/>to<sp/>all<sp/>param<sp/>lists<sp/>automatically<sp/>(using<sp/>maxAddr).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a7c453b84da2aa5c77d90159be49a83d3" kindref="member">ADnEDFirstParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDFirstParam);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a18c6a58e23cd3caffa13d351d2b82207" kindref="member">ADnEDResetParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDResetParam);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a368a60dcf785652e37443922670c230a" kindref="member">ADnEDStartParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDStartParam);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a812bcc26ad3cf219fa95401568b2ae82" kindref="member">ADnEDStopParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDStopParam);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1acbe67d17f002fc4099b79b4546058edd" kindref="member">ADnEDPauseParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDPauseParam);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1adb02b4f9b10d20f37b8f2aa8f9879862" kindref="member">ADnEDEventDebugParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDEventDebugParam);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aa3621bb4480126faa9a395c985033d33" kindref="member">ADnEDSeqCounterParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDSeqCounterParam);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a58641c321a75d211210f5a81806bd743" kindref="member">ADnEDPulseCounterParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDPulseCounterParam);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a8e7759905627d14bc624483a3d79c026" kindref="member">ADnEDEventRateParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDEventRateParam);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ae97cf9333dab2f60a8ec7357c8144479" kindref="member">ADnEDSeqIDParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDSeqIDParam);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a5809e6d4c99ff8acc644d9a37816167d" kindref="member">ADnEDSeqIDMissingParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDSeqIDMissingParam);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ae30496c0f98a58ff729fe85d730edb31" kindref="member">ADnEDSeqIDNumMissingParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDSeqIDNumMissingParam);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ada22fbb3efad53139b58b73937db7b6e" kindref="member">ADnEDBadTimeStampParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDBadTimeStampParam);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a0ab8eb286af99afc79a5151066f4941f" kindref="member">ADnEDPChargeParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDPChargeParam);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a18f024e57e4795836b1b4361f7282ddd" kindref="member">ADnEDPChargeIntParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDPChargeIntParam);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1abf3e3b16b3d2d8fde5c99e4e9181c8fd" kindref="member">ADnEDEventUpdatePeriodParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDEventUpdatePeriodParam);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aab422412426b98d1489be3bd1aadc1cf" kindref="member">ADnEDFrameUpdatePeriodParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDFrameUpdatePeriodParam);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a80243dac2c1680de5dd40cecc6a9542d" kindref="member">ADnEDNumChannelsParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDNumChannelsParam);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a8fe7e0897eb879e95ad0baa37893be02" kindref="member">ADnEDPVNameParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDPVNameParam);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a16ba0daddf41ffa747e6439592418e58" kindref="member">ADnEDNumDetParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDNumDetParam);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a5fa321da752eacf7a960e78f6a1e6a49" kindref="member">ADnEDDetPixelNumStartParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelNumStartParam);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a521f6acab7b10d0fb6c7e30eb6984e98" kindref="member">ADnEDDetPixelNumEndParamString</ref>,<sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelNumEndParam);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a853f88c2a999454dcc55a8267e1c3c46" kindref="member">ADnEDDetPixelNumSizeParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelNumSizeParam);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a751443d3d69f8c6b7c29673dbcbf66f1" kindref="member">ADnEDDetTOFNumBinsParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFNumBinsParam);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ae26fe0126886c1dece54af9fb24be4f0" kindref="member">ADnEDDet2DTypeParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDet2DTypeParam);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a9362b5da3791cbe12f1bd4af5ce73466" kindref="member">ADnEDDetNDArrayStartParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetNDArrayStartParam);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a2ff154d6a9a5ab79b7a532ae7f17a2fc" kindref="member">ADnEDDetNDArrayEndParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetNDArrayEndParam);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a3593be89772ca017d9f51328d3dbecd0" kindref="member">ADnEDDetNDArraySizeParamString</ref>,<sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetNDArraySizeParam);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ad200a5ec21b612614fde9badc3fbb140" kindref="member">ADnEDDetNDArrayTOFStartParamString</ref>,<sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetNDArrayTOFStartParam);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a4fa1579f728056ea7ce9e6f2e5da1ec6" kindref="member">ADnEDDetNDArrayTOFEndParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetNDArrayTOFEndParam);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a84df831ffb12b87749943e97979b2c6c" kindref="member">ADnEDDetEventRateParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetEventRateParam);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a4e447e6dddf49cc78441d45092ff0a6e" kindref="member">ADnEDDetEventTotalParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetEventTotalParam);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a05b9a23dc5df852d378d775309ff8a08" kindref="member">ADnEDDetTOFROIStartParamString</ref>,<sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFROIStartParam);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a53e030337799a91ca85958bc29f3a002" kindref="member">ADnEDDetTOFROISizeParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFROISizeParam);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a394d5418a6623115404161253404c70d" kindref="member">ADnEDDetTOFROIEnableParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFROIEnableParam);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aae51e18130f8095dfe547b2ab9a49fba" kindref="member">ADnEDDetTOFArrayResetParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFArrayResetParam);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Params<sp/>to<sp/>use<sp/>with<sp/>ADnEDTransform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1abc69889215b2d9da24deb89c1b5e097d" kindref="member">ADnEDDetTOFTransFile0ParamString</ref>,<sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransFile0Param);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a2e3932333416e455597674ee0682bb62" kindref="member">ADnEDDetTOFTransFile1ParamString</ref>,<sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransFile1Param);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a8caf41fd5e9ea079f20b2147c7854cc0" kindref="member">ADnEDDetTOFTransFile2ParamString</ref>,<sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransFile2Param);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a3330d6cdf340eba499fea2e8d4ca0305" kindref="member">ADnEDDetTOFTransFile3ParamString</ref>,<sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransFile3Param);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a4a0f2f0ffc23e05024ba3fbf24f7fc36" kindref="member">ADnEDDetTOFTransFile4ParamString</ref>,<sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransFile4Param);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a320e9a1d0b61cb1a3d8bfb7421abae9a" kindref="member">ADnEDDetTOFTransFile5ParamString</ref>,<sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransFile5Param);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a0633ee49333178005459a066f9c46e43" kindref="member">ADnEDDetTOFTransInt0ParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransInt0Param);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ae729dcda6f2db579530ec952ac1a8529" kindref="member">ADnEDDetTOFTransInt1ParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransInt1Param);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a3702e417105be932105737bce0687a85" kindref="member">ADnEDDetTOFTransInt2ParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransInt2Param);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a69aec83a8c7f105e5e6e549d7d145177" kindref="member">ADnEDDetTOFTransInt3ParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransInt3Param);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a0c9e9e76a5a28a51d103c6f5cff9ff2b" kindref="member">ADnEDDetTOFTransInt4ParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransInt4Param);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1acdbd5f638d80dce60027180962182a7a" kindref="member">ADnEDDetTOFTransInt5ParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransInt5Param);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a5544f6287790ecfe8406ac56ed117879" kindref="member">ADnEDDetTOFTransFloat0ParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransFloat0Param);<sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1af32d2c085215149d1ddb363a28ee9cfb" kindref="member">ADnEDDetTOFTransFloat1ParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransFloat1Param);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a162c0872f25d59c50bf9e14c4e1d4271" kindref="member">ADnEDDetTOFTransFloat2ParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransFloat2Param);<sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a20ab9231b7d9ed4b99105fdb3f839c89" kindref="member">ADnEDDetTOFTransFloat3ParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransFloat3Param);<sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aae02636496cd29e5dc68011d99d06e18" kindref="member">ADnEDDetTOFTransFloat4ParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransFloat4Param);<sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ac78f38b61fff326d505bdd223231b79f" kindref="member">ADnEDDetTOFTransFloat5ParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransFloat5Param);<sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a09473548c2963d9d910a66c70818af2f" kindref="member">ADnEDDetTOFTransPrintParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransPrintParam);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1ac866633107e92c83b79388e8588744d5" kindref="member">ADnEDDetTOFTransDebugParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransDebugParam);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1afee02836a74de4904a1afe965b9af2e6" kindref="member">ADnEDDetTOFTransTypeParamString</ref>,<sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetTOFTransTypeParam);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a347a95e6d1362a7b07cd11b349262664" kindref="member">ADnEDDetTOFTransOffsetParamString</ref>,<sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransOffsetParam);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a6e2ecc91ed292a0b82090374678d20c9" kindref="member">ADnEDDetTOFTransScaleParamString</ref>,<sp/><sp/><sp/>asynParamFloat64,<sp/><sp/>&amp;ADnEDDetTOFTransScaleParam);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aa566b7b678094644c462069b18ac3ebb" kindref="member">ADnEDDetPixelMapFileParamString</ref>,<sp/><sp/><sp/><sp/>asynParamOctet,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelMapFileParam);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aa216c79d67e1f01c7a60921282daab5d" kindref="member">ADnEDDetPixelMapPrintParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelMapPrintParam);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a786a367a86dc374a9ac621c0c727448b" kindref="member">ADnEDDetPixelMapEnableParamString</ref>,<sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelMapEnableParam);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a8c1694d0fb3191353ca5bbfbf8561073" kindref="member">ADnEDDetPixelROIStartXParamString</ref>,<sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelROIStartXParam);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a244c9a3240408b7c5daa23afcfacce38" kindref="member">ADnEDDetPixelROISizeXParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelROISizeXParam);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aea82195838932c8d6162ebe91efbfbb6" kindref="member">ADnEDDetPixelROIStartYParamString</ref>,<sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelROIStartYParam);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a613997d7f071fb544a46bac35b4ed921" kindref="member">ADnEDDetPixelROISizeYParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelROISizeYParam);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a479f0d2a886ab579731b0694ef97b08d" kindref="member">ADnEDDetPixelSizeXParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelSizeXParam);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a3a16cd61eb01aeecc8073ed11da46d4e" kindref="member">ADnEDDetPixelROIEnableParamString</ref>,<sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDDetPixelROIEnableParam);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1afe624fa15c27ee53e971321bde7e9685" kindref="member">ADnEDTOFMaxParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDTOFMaxParam);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a8386492fa6a14862c98e2894c63021f6" kindref="member">ADnEDAllocSpaceParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDAllocSpaceParam);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1a0b73af068738a2edbaadb2f5e9f6eb93" kindref="member">ADnEDAllocSpaceStatusParamString</ref>,<sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDAllocSpaceStatusParam);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>createParam(<ref refid="_a_dn_e_d_8h_1aa705eabb8e01c90d9ff2a68310e96e09" kindref="member">ADnEDLastParamString</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynParamInt32,<sp/><sp/><sp/><sp/>&amp;ADnEDLastParam);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Initialize<sp/>non<sp/>static,<sp/>non<sp/>const,<sp/>data<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>m_acquiring<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chan=0;<sp/>chan&lt;s_ADNED_MAX_CHANNELS;<sp/>++chan)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>m_seqCounter[chan]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>m_seqID[chan]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lastSeqID[chan]<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//Init<sp/>to<sp/>-1<sp/>to<sp/>catch<sp/>packet<sp/>trains<sp/>stuck<sp/>at<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>m_pulseCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>m_pChargeInt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>m_nowTimeSecs<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>m_lastTimeSecs<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>p_Data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>m_dataAlloc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>m_dataMaxSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>m_bufferMaxSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>m_tofMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chan=0;<sp/>chan&lt;s_ADNED_MAX_CHANNELS;<sp/>++chan)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>m_TimeStamp[chan].put(0,0);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>m_TimeStampLast[chan].put(0,0);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>=0;<sp/><ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>&lt;=s_ADNED_MAX_DETS;<sp/>++<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>p_PixelMap[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>m_PixelMapSize[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detStartValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detEndValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detSizeValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>m_NDArrayStartValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>m_NDArrayTOFStartValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTOFROIStartValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTOFROISizeValues[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTOFROIEnabled[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelMappingEnabled[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTOFTransType[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTOFTransOffset[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTOFTransScale[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelROIStartX[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelROISizeX[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelROIStartY[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelROISizeY[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelSizeX[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detPixelROIEnable[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTotalEvents[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>thread<sp/>that<sp/>reads<sp/>the<sp/>data<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>(epicsThreadCreate(</highlight><highlight class="stringliteral">&quot;ADnEDEventTask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsThreadPriorityHigh,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsThreadGetStackSize(epicsThreadStackMedium),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(EPICSTHREADFUNC)ADnEDEventTaskC,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>epicsThreadCreate<sp/>failure<sp/>for<sp/>ADnEDEventTask.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>the<sp/>thread<sp/>that<sp/>copies<sp/>the<sp/>frames<sp/>for<sp/>areaDetector<sp/>plugins<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>(epicsThreadCreate(</highlight><highlight class="stringliteral">&quot;ADnEDFrameTask&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsThreadPriorityMedium,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsThreadGetStackSize(epicsThreadStackMedium),</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(EPICSTHREADFUNC)ADnEDFrameTaskC,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>epicsThreadCreate<sp/>failure<sp/>for<sp/>ADnEDFrameTask.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="namespacehdf5_1abeed318faeb13380e1b4221bd4198bf1aea271040d7a5b8d9af9cbf6564d262d5" kindref="member">std::string</ref><sp/>channelStr(</highlight><highlight class="stringliteral">&quot;ADnED<sp/>Channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="namespacehdf5_1abeed318faeb13380e1b4221bd4198bf1aea271040d7a5b8d9af9cbf6564d262d5" kindref="member">std::string</ref><sp/>monitorStr(</highlight><highlight class="stringliteral">&quot;ADnED<sp/>Monitor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>p_ChannelRequester<sp/>=<sp/>(shared_ptr&lt;nEDChannelRequester&gt;)(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classn_e_d_channel_1_1n_e_d_channel_requester" kindref="compound">nEDChannelRequester</ref>(channelStr));<sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_ChannelRequester)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ERROR:<sp/>Failed<sp/>to<sp/>create<sp/>nEDChannelRequester.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Create<sp/>a<sp/>different<sp/>monitor<sp/>requestor<sp/>for<sp/>each<sp/>PVAccess<sp/>channel<sp/>that<sp/>we<sp/>want<sp/>to<sp/>connect<sp/>to.<sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//so<sp/>we<sp/>can<sp/>distinguish<sp/>which<sp/>channel<sp/>caused<sp/>a<sp/>monitor,<sp/>which<sp/>is<sp/>necessary<sp/>in<sp/>the<sp/>eventHandler<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel=0;<sp/>channel&lt;s_ADNED_MAX_CHANNELS;<sp/>++channel)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>p_MonitorRequester[channel]<sp/>=<sp/>(shared_ptr&lt;nEDMonitorRequester&gt;)(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classn_e_d_channel_1_1n_e_d_monitor_requester" kindref="compound">nEDMonitorRequester</ref>(monitorStr,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>channel));<sp/><sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_MonitorRequester[channel])<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>ERROR:<sp/>Failed<sp/>to<sp/>create<sp/>nEDMonitorRequester.<sp/>channel:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>channel);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>paramStatus<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Initialise<sp/>any<sp/>paramLib<sp/>parameters<sp/>that<sp/>need<sp/>passing<sp/>up<sp/>to<sp/>device<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDResetParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDStartParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDStopParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDPauseParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDEventDebugParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDPulseCounterParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDEventRateParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(ADnEDPChargeParam,<sp/>0.0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(ADnEDPChargeIntParam,<sp/>0.0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDNumDetParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDNumChannelsParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Loop<sp/>over<sp/>asyn<sp/>addresses<sp/>for<sp/>detector<sp/>and<sp/>channel<sp/>specific<sp/>params.<sp/>We<sp/>create<sp/>both<sp/>here<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//we<sp/>are<sp/>using<sp/>the<sp/>Asyn<sp/>address<sp/>to<sp/>handle<sp/>both<sp/>the<sp/>detector<sp/>and<sp/>channel<sp/>params.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=0;<sp/>det&lt;=s_ADNED_MAX_DETS;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Channel<sp/>params<sp/>(0-based)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDSeqCounterParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDSeqIDParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDPVNameParam,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDSeqIDMissingParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDSeqIDNumMissingParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDBadTimeStampParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Detector<sp/>params<sp/>(1-based)<sp/>-<sp/>we<sp/>just<sp/>don&apos;t<sp/>use<sp/>the<sp/>addr=0<sp/>params.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelNumStartParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelNumEndParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelNumSizeParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFNumBinsParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDet2DTypeParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetNDArrayStartParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetNDArrayEndParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetNDArraySizeParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetNDArrayTOFStartParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetNDArrayTOFEndParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetEventRateParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetEventTotalParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFROIStartParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFROISizeParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFROIEnableParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFArrayResetParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Params<sp/>to<sp/>use<sp/>with<sp/>ADnEDTransform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetTOFTransFile0Param,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetTOFTransFile1Param,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetTOFTransFile2Param,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetTOFTransFile3Param,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetTOFTransFile4Param,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetTOFTransFile5Param,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransInt0Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransInt1Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransInt2Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransInt3Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransInt4Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransInt5Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransFloat0Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransFloat1Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransFloat2Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransFloat3Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransFloat4Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransFloat5Param,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransDebugParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetTOFTransTypeParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransOffsetParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setDoubleParam(det,<sp/>ADnEDDetTOFTransScaleParam,<sp/>1)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam(det,<sp/>ADnEDDetPixelMapFileParam,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelMapEnableParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelROIStartXParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelROISizeXParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelROIStartYParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelROISizeYParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelSizeXParam,<sp/>1)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(det,<sp/>ADnEDDetPixelROIEnableParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(det);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDTOFMaxParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDAllocSpaceParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setIntegerParam(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_OK)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam<sp/>(ADManufacturer,<sp/></highlight><highlight class="stringliteral">&quot;SNS&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>paramStatus<sp/>=<sp/>((setStringParam<sp/>(ADModel,<sp/></highlight><highlight class="stringliteral">&quot;nED<sp/>areaDetector&quot;</highlight><highlight class="normal">)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>paramStatus);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paramStatus)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Unable<sp/>To<sp/>Set<sp/>Driver<sp/>Parameters<sp/>In<sp/>Constructor.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=s_ADNED_MAX_DETS;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>p_Transform[det]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d_transform" kindref="compound">ADnEDTransform</ref>();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>End<sp/>Of<sp/>Constructor.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>epicsThreadSleep(1);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><ref refid="class_a_dn_e_d_1adde4b69a8f556c8f2b4ac756afcd5728" kindref="member">ADnED::~ADnED</ref>()<sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;ADnED::~ADnED<sp/>Called.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">asynStatus<sp/><ref refid="class_a_dn_e_d_1a70391a3f618b663e48303850020ee5e2" kindref="member">ADnED::createFactory</ref>()</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Starting<sp/>ClientFactory::start()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>epics::pvAccess::ClientFactory::start();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Exception<sp/>for<sp/>ClientFactory::start().<sp/>Exception:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>e.what());</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>epicsThreadSleep(1);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynSuccess;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d_1a129d879ea48ad560e096c7601cc3586b" kindref="member">ADnED::report</ref>(FILE<sp/>*fp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>details)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;ADnED::report.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;ADnED<sp/>port=%s\n&quot;</highlight><highlight class="normal">,<sp/>this-&gt;portName);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(details<sp/>&gt;<sp/>0)<sp/>{<sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;ADnED<sp/>driver<sp/>details...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>fprintf(fp,<sp/></highlight><highlight class="stringliteral">&quot;ADnED<sp/>finished.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Call<sp/>the<sp/>base<sp/>class<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="classasyn_n_d_array_driver_1ac3f2d73a05eb54357ec3f052e1b000f2" kindref="member">asynNDArrayDriver::report</ref>(fp,<sp/>details);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">asynStatus<sp/><ref refid="class_a_dn_e_d_1a6f48d5cb4595d80ac463f6985c2339ef" kindref="member">ADnED::writeInt32</ref>(asynUser<sp/>*pasynUser,<sp/>epicsInt32<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>asynStatus<sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>pasynUser-&gt;reason;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adStatus<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::writeInt32&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Entry.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Read<sp/>address<sp/>(ie.<sp/>det<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>getAddress(pasynUser,<sp/>&amp;addr);<sp/></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status!=asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(status);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>getIntegerParam(<ref refid="class_a_d_driver_1a6a532aae0f51273450f4e897bf0aed1d" kindref="member">ADStatus</ref>,<sp/>&amp;adStatus);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDResetParam)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Reset.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Reset<sp/>some<sp/>params<sp/>(total<sp/>counts,<sp/>PCharge,<sp/>seq<sp/>numbers,<sp/>etc,<sp/>without<sp/>doing<sp/>a<sp/>start.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_dn_e_d_1adf510d01ec66f97ead176ec399b6189e" kindref="member">clearParams</ref>()<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Failed<sp/>to<sp/>run<sp/>clearParams<sp/>on<sp/>Reset.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDStartParam)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((adStatus<sp/>==<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72eae5aabf2281b95d16f607f1a7b1c5a8bd" kindref="member">ADStatusIdle</ref>)<sp/>||<sp/>(adStatus<sp/>==<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea4f0778c31f69985dab4e84a0d9cb1cf2" kindref="member">ADStatusError</ref>)<sp/>||<sp/>(adStatus<sp/>==<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72eac174a17d7ad44cb4a19dd727258a582e" kindref="member">ADStatusAborted</ref>))<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Start<sp/>acqusition.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_dn_e_d_1adf510d01ec66f97ead176ec399b6189e" kindref="member">clearParams</ref>()<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Failed<sp/>to<sp/>run<sp/>clearParams<sp/>on<sp/>start.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Start<sp/>Reading<sp/>Events.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>start<sp/>event&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDPauseParam,<sp/>0);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsEventSignal(this-&gt;m_startEvent);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>we<sp/>have<sp/>tried<sp/>to<sp/>Start<sp/>while<sp/>still<sp/>acquiring,<sp/>or<sp/>some<sp/>other<sp/>state,<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>clear<sp/>the<sp/>busy<sp/>record<sp/>anyway.<sp/>Print<sp/>an<sp/>error<sp/>so<sp/>we<sp/>know<sp/>about<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Tried<sp/>to<sp/>Start<sp/>from<sp/>an<sp/>invalid<sp/>state<sp/>(ADStatus=%d).\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>adStatus);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Note:<sp/>this<sp/>does<sp/>not<sp/>work.<sp/>I<sp/>need<sp/>to<sp/>clear<sp/>the<sp/>busy<sp/>from<sp/>outside<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDStartParam,<sp/>0);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDStopParam)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>==<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Stop<sp/>acqusition.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Stop<sp/>Reading<sp/>Events.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sending<sp/>stop<sp/>event&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDPauseParam,<sp/>0);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsEventSignal(this-&gt;m_stopEvent);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>we<sp/>have<sp/>tried<sp/>to<sp/>Stop<sp/>while<sp/>not<sp/>acquiring,<sp/>or<sp/>some<sp/>other<sp/>state,<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>clear<sp/>the<sp/>busy<sp/>record<sp/>anyway.<sp/>Print<sp/>an<sp/>error<sp/>so<sp/>we<sp/>know<sp/>about<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Tried<sp/>to<sp/>Stop<sp/>from<sp/>an<sp/>invalid<sp/>state<sp/>(ADStatus=%d).\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>adStatus);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Note:<sp/>this<sp/>does<sp/>not<sp/>work.<sp/>I<sp/>need<sp/>to<sp/>clear<sp/>the<sp/>busy<sp/>from<sp/>outside<sp/>this<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDStopParam,<sp/>0);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelNumStartParam)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_dataAlloc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelNumEndParam)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_dataAlloc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelNumSizeParam)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_dataAlloc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDTOFMaxParam)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_dataAlloc<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDAllocSpaceParam)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_dn_e_d_1a4809a46a01de5350ef9a8c63ead53805" kindref="member">allocArray</ref>()<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Failed<sp/>to<sp/>allocate<sp/>array.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_FAIL);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStringParam(<ref refid="class_a_d_driver_1af8ca049bdf54eede6611e50a284152bc" kindref="member">ADStatusMessage</ref>,<sp/></highlight><highlight class="stringliteral">&quot;allocArray<sp/>Error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="class_a_d_driver_1a6a532aae0f51273450f4e897bf0aed1d" kindref="member">ADStatus</ref>,<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea4f0778c31f69985dab4e84a0d9cb1cf2" kindref="member">ADStatusError</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDNumDetParam)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>&gt;<sp/>s_ADNED_MAX_DETS)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>Setting<sp/>Number<sp/>Of<sp/>Detectors.<sp/>Max:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>s_ADNED_MAX_DETS);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDNumChannelsParam)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(adStatus<sp/>!=<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>&gt;<sp/>s_ADNED_MAX_CHANNELS)<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>Setting<sp/>Number<sp/>Of<sp/>PVAccess<sp/>channels.<sp/>Max:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>s_ADNED_MAX_CHANNELS);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>Cannot<sp/>configure<sp/>during<sp/>acqusition.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetTOFTransPrintParam)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>printTofTrans(addr);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetTOFTransDebugParam)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_Transform[addr]-&gt;<ref refid="class_a_dn_e_d_transform_base_1ac7992fbee77d6bc255fa945985b8f0f5" kindref="member">setDebug</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_Transform[addr]-&gt;<ref refid="class_a_dn_e_d_transform_base_1ac7992fbee77d6bc255fa945985b8f0f5" kindref="member">setDebug</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelMapPrintParam)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>printPixelMap(addr);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelROISizeXParam)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelROIEnableParam)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>we<sp/>enable<sp/>Pixel<sp/>ROI<sp/>Filter,<sp/>disable<sp/>the<sp/>TOF<sp/>ROI<sp/>Filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(addr,<sp/>ADnEDDetTOFROIEnableParam,<sp/>0);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetTOFROIEnableParam)<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>we<sp/>enable<sp/>TOF<sp/>ROI<sp/>Filter,<sp/>disable<sp/>the<sp/>Pixel<sp/>ROI<sp/>Filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(addr,<sp/>ADnEDDetPixelROIEnableParam,<sp/>0);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetTOFArrayResetParam)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Clear<sp/>the<sp/>TOF<sp/>Array<sp/>for<sp/>this<sp/>detector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>resetTOFArray(addr);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>transIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchTransInt(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>transIndex))<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Transform[addr]-&gt;setIntParam(transIndex,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>)<sp/>!=<sp/><ref refid="_a_dn_e_d_globals_8h_1a39703102d8a288f8a24b2c603f3740a4" kindref="member">ADNED_TRANSFORM_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>loading<sp/>int32<sp/>into<sp/>p_Transform[%d].<sp/>transIndex:<sp/>%d,<sp/>value:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr,<sp/>transIndex,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_dataAlloc)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_REQ);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(addr);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>(asynStatus)<sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(addr,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status!=asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>Setting<sp/>Parameter.<sp/>Asyn<sp/>addr:<sp/>%d,<sp/>asynUser-&gt;reason:<sp/>%d,<sp/>value:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>addr,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(status);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Do<sp/>callbacks<sp/>so<sp/>higher<sp/>layers<sp/>see<sp/>any<sp/>changes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>callParamCallbacks(addr);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">asynStatus<sp/><ref refid="class_a_dn_e_d_1a9b7c29a1d6afe23d441b364dd47abcec" kindref="member">ADnED::writeFloat64</ref>(asynUser<sp/>*pasynUser,<sp/>epicsFloat64<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>pasynUser-&gt;reason;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>asynStatus<sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::writeFloat64&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Entry.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>asynUser-&gt;reason:<sp/>%d,<sp/>value:<sp/>%f,<sp/>addr:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>,<sp/>addr);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Read<sp/>address<sp/>(ie.<sp/>det<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>getAddress(pasynUser,<sp/>&amp;addr);<sp/></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status!=asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(status);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>transIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchTransFloat(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>transIndex))<sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Transform[addr]-&gt;setDoubleParam(transIndex,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>)<sp/>!=<sp/><ref refid="_a_dn_e_d_globals_8h_1a39703102d8a288f8a24b2c603f3740a4" kindref="member">ADNED_TRANSFORM_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>loading<sp/>float64<sp/>into<sp/>p_Transform[%d].<sp/>transIndex:<sp/>%d,<sp/>value:<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr,<sp/>transIndex,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDFrameUpdatePeriodParam)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Setting<sp/>ADnEDFrameUpdatePeriodParam<sp/>to<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(addr);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Set<sp/>in<sp/>param<sp/>lib<sp/>so<sp/>the<sp/>user<sp/>sees<sp/>a<sp/>readback<sp/>straight<sp/>away.<sp/>We<sp/>might<sp/>overwrite<sp/>this<sp/>in<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//status<sp/>task,<sp/>depending<sp/>on<sp/>the<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>(asynStatus)<sp/>setDoubleParam(addr,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status!=asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>Setting<sp/>Parameter.<sp/>Asyn<sp/>addr:<sp/>%d,<sp/>asynUser-&gt;reason:<sp/>%d,<sp/>value:<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>addr,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(status);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Do<sp/>callbacks<sp/>so<sp/>higher<sp/>layers<sp/>see<sp/>any<sp/>changes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>callParamCallbacks(addr);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">asynStatus<sp/><ref refid="class_a_dn_e_d_1a17154f53e46dd486b5b01067cc5dfffb" kindref="member">ADnED::writeOctet</ref>(asynUser<sp/>*pasynUser,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>,<sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nChars,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*nActual)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>=<sp/>pasynUser-&gt;reason;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>asynStatus<sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::writeOctet&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Entry.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Read<sp/>address<sp/>(ie.<sp/>det<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>getAddress(pasynUser,<sp/>&amp;addr);<sp/></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status!=asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(status);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>transIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matchTransFile(</highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>transIndex))<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Set<sp/>Det<sp/>%d<sp/>TOF<sp/>Transformation<sp/>(Index<sp/>%d)<sp/>File:<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr,<sp/>transIndex,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>epicsUInt32<sp/>arraySize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>epicsFloat64<sp/>*pArray<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_dn_e_d_file" kindref="compound">ADnEDFile</ref><sp/>file<sp/>=<sp/><ref refid="class_a_dn_e_d_file" kindref="compound">ADnEDFile</ref>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.<ref refid="class_a_dn_e_d_file_1a1678340522a16d0c6df2b80b5e662e59" kindref="member">getSize</ref>()<sp/>!=<sp/>0)<sp/>{<sp/></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arraySize<sp/>=<sp/>file.<ref refid="class_a_dn_e_d_file_1a1678340522a16d0c6df2b80b5e662e59" kindref="member">getSize</ref>();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pArray<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pArray<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsFloat64<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(calloc(arraySize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsFloat64)));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.<ref refid="class_a_dn_e_d_file_1aa4a1536263d77195454d27eb4eb3a18a" kindref="member">readDataIntoDoubleArray</ref>(&amp;pArray);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Transform[addr]-&gt;setDoubleArray(transIndex,<sp/>pArray,<sp/>arraySize)<sp/>!=<sp/><ref refid="_a_dn_e_d_globals_8h_1a39703102d8a288f8a24b2c603f3740a4" kindref="member">ADNED_TRANSFORM_OK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>loading<sp/>array<sp/>into<sp/>p_Transform[%d]\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>Parsing<sp/>TOF<sp/>Transformation<sp/>File.<sp/>Det:<sp/>%d.<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr,<sp/>e.what());</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pArray<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(pArray);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>==<sp/>ADnEDDetPixelMapFileParam)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Set<sp/>Det<sp/>%d<sp/>Pixel<sp/>Map<sp/>File:<sp/>%s.\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_PixelMap[addr])<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(p_PixelMap[addr]);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_PixelMap[addr]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_PixelMapSize[addr]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_a_dn_e_d_file" kindref="compound">ADnEDFile</ref><sp/>file<sp/>=<sp/><ref refid="class_a_dn_e_d_file" kindref="compound">ADnEDFile</ref>(<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.<ref refid="class_a_dn_e_d_file_1a1678340522a16d0c6df2b80b5e662e59" kindref="member">getSize</ref>()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_PixelMapSize[addr]<sp/>=<sp/>file.<ref refid="class_a_dn_e_d_file_1a1678340522a16d0c6df2b80b5e662e59" kindref="member">getSize</ref>();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_PixelMap[addr]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_PixelMap[addr]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(calloc(m_PixelMapSize[addr],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsUInt32)));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.<ref refid="class_a_dn_e_d_file_1a4ac7d0fa38b28c7fcef0c899e87bdf5e" kindref="member">readDataIntoIntArray</ref>(&amp;p_PixelMap[addr]);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((status<sp/>=<sp/>checkPixelMap(addr))<sp/>==<sp/>asynError)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(p_PixelMap[addr]);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_PixelMap[addr]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>parsing<sp/>pixel<sp/>mapping<sp/>file.<sp/>Det:<sp/>%d.<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>addr,<sp/>e.what());</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(p_PixelMap[addr]);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_PixelMap[addr]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>parameter<sp/>belongs<sp/>to<sp/>a<sp/>base<sp/>class<sp/>call<sp/>its<sp/>method<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>&lt;<sp/><ref refid="_a_dn_e_d_8h_1a132bffd05a10115da9db55015c71393a" kindref="member">ADNED_FIRST_DRIVER_COMMAND</ref>)<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="classasyn_n_d_array_driver_1a84d981f8995d984035bb9feff727d520" kindref="member">asynNDArrayDriver::writeOctet</ref>(pasynUser,<sp/><ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>,<sp/>nChars,<sp/>nActual);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(addr);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>parameter<sp/>in<sp/>the<sp/>parameter<sp/>library.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>(asynStatus)setStringParam(addr,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<ref refid="namespacemake_db_and_edl_1a7cc19c5fdb190aab14fe515dd85b45b7" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>callbacks<sp/>so<sp/>higher<sp/>layers<sp/>see<sp/>any<sp/>changes<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>(asynStatus)callParamCallbacks(addr);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status)<sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Error<sp/>Setting<sp/>Parameter.<sp/>asynUser-&gt;reason:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>*nActual<sp/>=<sp/>nChars;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnED::printPixelMap(epicsUInt32<sp/>det)</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::printPixelMap.<sp/>Det:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>det);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_PixelMapSize[det]<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(p_PixelMap[det]))<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;m_PixelMapSize[%d]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>det,<sp/>m_PixelMapSize[det]);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(epicsUInt32<sp/>index=0;<sp/>index&lt;m_PixelMapSize[det];<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;p_PixelMap[%d][%d]:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>det,<sp/>index,<sp/>(p_PixelMap[det])[index]);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>pixel<sp/>mapping<sp/>loaded.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnED::printTofTrans(epicsUInt32<sp/>det)</highlight></codeline>
<codeline lineno="802"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::printTofTrans.<sp/>Det:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>det);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>p_Transform[det]-&gt;<ref refid="class_a_dn_e_d_transform_base_1a95b80f6a697d9b5d639085c3734105f1" kindref="member">printParams</ref>();</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ADnED::matchTransFile(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asynParam,<sp/>epicsUInt32<sp/>&amp;transIndex)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Unfortunately<sp/>can&apos;t<sp/>use<sp/>switch<sp/>statement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFile0Param)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFile1Param)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFile2Param)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFile3Param)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFile4Param)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFile5Param)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ADnED::matchTransInt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asynParam,<sp/>epicsUInt32<sp/>&amp;transIndex)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Unfortunately<sp/>can&apos;t<sp/>use<sp/>switch<sp/>statement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransInt0Param)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransInt1Param)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransInt2Param)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransInt3Param)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransInt4Param)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransInt5Param)<sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ADnED::matchTransFloat(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>asynParam,<sp/>epicsUInt32<sp/>&amp;transIndex)</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Unfortunately<sp/>can&apos;t<sp/>use<sp/>switch<sp/>statement<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFloat0Param)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFloat1Param)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFloat2Param)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFloat3Param)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFloat4Param)<sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asynParam<sp/>==<sp/>ADnEDDetTOFTransFloat5Param)<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>transIndex<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">asynStatus<sp/>ADnED::checkPixelMap(epicsUInt32<sp/>det)</highlight></codeline>
<codeline lineno="928"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>asynStatus<sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::checkPixelMap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detSizeValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumSizeParam,<sp/>&amp;detSizeValue);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_PixelMapSize[det]<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(p_PixelMap[det]))<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(epicsUInt32<sp/>index=0;<sp/>index&lt;m_PixelMapSize[det];<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p_PixelMap[det])[index]<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(detSizeValue))<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Det:<sp/>%d.<sp/>Pixel<sp/>ID<sp/>%d<sp/>in<sp/>mapping<sp/>array<sp/>was<sp/>out<sp/>of<sp/>allowed<sp/>range.<sp/>Must<sp/>be<sp/>less<sp/>than<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>det,<sp/>index,<sp/>detSizeValue);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(p_PixelMap[det],<sp/>0,<sp/>m_PixelMapSize[det]);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_PixelMapSize[det]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>No<sp/>pixel<sp/>mapping<sp/>loaded.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnED::resetTOFArray(epicsUInt32<sp/>det)</highlight></codeline>
<codeline lineno="961"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tofStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>*p_tof;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::resetTOFArray.<sp/>det:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>det);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_tofMax<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetNDArrayTOFStartParam,<sp/>&amp;tofStart);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p_Data<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(tofStart<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_tof<sp/>=<sp/>p_Data<sp/>+<sp/>tofStart;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(p_tof,<sp/>0,<sp/>(m_tofMax+1)*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsUInt32));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::resetTOFArray.<sp/>Need<sp/>to<sp/>alloc<sp/>memory<sp/>first.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d_1a3ec65c24f2ceb3ff24459e535e62e4c1" kindref="member">ADnED::eventHandler</ref>(shared_ptr&lt;epics::pvData::PVStructure&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;pv_struct,<sp/>epicsUInt32<sp/>channelID)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>eventDebug<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>eventUpdate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newPulse<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>epicsFloat64<sp/>updatePeriod<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numMissingPackets<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeDiffSecs<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>eventRate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numChanOrDet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::eventHandler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Event<sp/>Handler.<sp/>Channel<sp/>ID<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>channelID);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>are<sp/>paused,<sp/>still<sp/>do<sp/>timestamp<sp/>and<sp/>seq<sp/>number<sp/>checks,<sp/></highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>otherwise<sp/>we<sp/>will<sp/>see<sp/>missing<sp/>packets.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paused<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>getIntegerParam(ADnEDPauseParam,<sp/>&amp;paused);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>time<sp/>and<sp/>decide<sp/>if<sp/>we<sp/>update<sp/>the<sp/>PVs.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>getDoubleParam(ADnEDEventUpdatePeriodParam,<sp/>&amp;updatePeriod);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>epicsTimeGetCurrent(&amp;m_nowTime);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>m_nowTimeSecs<sp/>=<sp/>m_nowTime.secPastEpoch<sp/>+<sp/>(m_nowTime.nsec<sp/>/<sp/>1.e9);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_nowTimeSecs<sp/>-<sp/>m_lastTimeSecs)<sp/>&lt;<sp/>(updatePeriod<sp/>/<sp/>1000.0))<sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>eventUpdate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>eventUpdate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>timeDiffSecs<sp/>=<sp/>m_nowTimeSecs<sp/>-<sp/>m_lastTimeSecs;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lastTimeSecs<sp/>=<sp/>m_nowTimeSecs;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sanity<sp/>check<sp/>on<sp/>channelID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelID<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s_ADNED_MAX_CHANNELS))<sp/>{<sp/></highlight><highlight class="comment">//0<sp/>based</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Invalid<sp/>channel<sp/>ID<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>channelID);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numChan<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>getIntegerParam(ADnEDNumChannelsParam,<sp/>&amp;numChan);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numChan<sp/>&gt;<sp/>s_ADNED_MAX_CHANNELS)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>numChan<sp/>=<sp/>s_ADNED_MAX_CHANNELS;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>getIntegerParam(ADnEDNumDetParam,<sp/>&amp;numDet);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numDet<sp/>&gt;<sp/>s_ADNED_MAX_DETS)<sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>numDet<sp/>=<sp/>s_ADNED_MAX_DETS;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>getIntegerParam(ADnEDEventDebugParam,<sp/>&amp;eventDebug);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=numDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumStartParam,<sp/>&amp;m_detStartValues[det]);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumEndParam,<sp/>&amp;m_detEndValues[det]);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumSizeParam,<sp/>&amp;m_detSizeValues[det]);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetNDArrayStartParam,<sp/>&amp;m_NDArrayStartValues[det]);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetNDArrayTOFStartParam,<sp/>&amp;m_NDArrayTOFStartValues[det]);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//These<sp/>two<sp/>params<sp/>are<sp/>used<sp/>to<sp/>filter<sp/>events<sp/>based<sp/>on<sp/>a<sp/>TOF<sp/>ROI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetTOFROIStartParam,<sp/>&amp;m_detTOFROIStartValues[det]);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetTOFROISizeParam,<sp/>&amp;m_detTOFROISizeValues[det]);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetTOFROIEnableParam,<sp/>&amp;m_detTOFROIEnabled[det]);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Pixel<sp/>ID<sp/>mapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelMapEnableParam,<sp/>&amp;m_detPixelMappingEnabled[det]);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TOF<sp/>Transformation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetTOFTransTypeParam,<sp/>&amp;m_detTOFTransType[det]);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>getDoubleParam(det,<sp/>ADnEDDetTOFTransOffsetParam,<sp/>&amp;m_detTOFTransOffset[det]);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>getDoubleParam(det,<sp/>ADnEDDetTOFTransScaleParam,<sp/>&amp;m_detTOFTransScale[det]);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Pixel<sp/>ID<sp/>XY<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelROIStartXParam,<sp/>&amp;m_detPixelROIStartX[det]);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelROIStartYParam,<sp/>&amp;m_detPixelROIStartY[det]);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelROISizeXParam,<sp/>&amp;m_detPixelROISizeX[det]);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelROISizeYParam,<sp/>&amp;m_detPixelROISizeY[det]);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelSizeXParam,<sp/>&amp;m_detPixelSizeX[det]);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelROIEnableParam,<sp/>&amp;m_detPixelROIEnable[det]);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detPixelROISizeX[det]<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Invalid<sp/>Pixel<sp/>ROI<sp/>Size<sp/>X.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Compare<sp/>timeStamp<sp/>to<sp/>last<sp/>timeStamp<sp/>to<sp/>detect<sp/>a<sp/>new<sp/>pulse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>++m_seqCounter[channelID];<sp/><sp/></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_PVTimeStamp.attach(pv_struct-&gt;getSubField&lt;epics::pvData::PVStructure&gt;(<ref refid="_a_dn_e_d_globals_8h_1a9f905ca631f55a508828bcac080df83c" kindref="member">ADNED_PV_TIMESTAMP</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Failed<sp/>to<sp/>attach<sp/>PVTimeStamp.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>m_PVTimeStamp.get(m_TimeStamp[channelID]);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Only<sp/>use<sp/>channel<sp/>ID<sp/>0<sp/>to<sp/>integrate<sp/>the<sp/>proton<sp/>charge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelID<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_TimeStampLast[0]<sp/>!=<sp/>m_TimeStamp[0])<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newPulse<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_TimeStampLast[channelID]<sp/>&gt;<sp/>m_TimeStamp[channelID])<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Backwards<sp/>timeStamp<sp/>detected<sp/>on<sp/>channel<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>channelID);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(channelID,<sp/>ADnEDBadTimeStampParam,<sp/>1);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>m_TimeStampLast[channelID].put(m_TimeStamp[channelID].getSecondsPastEpoch(),<sp/>m_TimeStamp[channelID].getNanoseconds());</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>m_seqID[channelID]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_TimeStamp[channelID].getUserTag());</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Detect<sp/>missing<sp/>packets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lastSeqID[channelID])<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_seqID[channelID]<sp/>!=<sp/>m_lastSeqID[channelID]+1)<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(channelID,<sp/>ADnEDSeqIDMissingParam,<sp/>m_lastSeqID[channelID]+1);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getIntegerParam(channelID,<sp/>ADnEDSeqIDNumMissingParam,<sp/>&amp;numMissingPackets);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(channelID,<sp/>ADnEDSeqIDNumMissingParam,<sp/>numMissingPackets+(m_seqID[channelID]-m_lastSeqID[channelID]+1));</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Missing<sp/>seq<sp/>ID<sp/>numbers<sp/>on<sp/>channel<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>channelID);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lastSeqID[channelID]<sp/>=<sp/>m_seqID[channelID];</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Failed<sp/>to<sp/>deal<sp/>with<sp/>time<sp/>stamp<sp/>objects.<sp/>Exception:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>e.what());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>epics::pvData::PVDoublePtr<sp/>pChargePtr<sp/>=<sp/>pv_struct-&gt;getSubField&lt;epics::pvData::PVDouble&gt;(<ref refid="_a_dn_e_d_globals_8h_1ae73f03409718a254384483dd1b583b64" kindref="member">ADNED_PV_PCHARGE</ref>);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pChargePtr)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>No<sp/>valid<sp/>pCharge<sp/>found.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p_Data<sp/>==<sp/>NULL)<sp/>||<sp/>(m_dataMaxSize<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>epics::pvData::PVUIntArrayPtr<sp/>pixelsPtr<sp/>=<sp/>pv_struct-&gt;getSubField&lt;epics::pvData::PVUIntArray&gt;(<ref refid="_a_dn_e_d_globals_8h_1a27bf21f4ac7af85a194082be9a3a9c17" kindref="member">ADNED_PV_PIXELS</ref>);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>epics::pvData::PVUIntArrayPtr<sp/>tofPtr<sp/>=<sp/>pv_struct-&gt;getSubField&lt;epics::pvData::PVUIntArray&gt;(<ref refid="_a_dn_e_d_globals_8h_1a93b6576ebadaf4b1d14e467e521a8a1d" kindref="member">ADNED_PV_TOF</ref>);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixelsPtr<sp/>&amp;&amp;<sp/>tofPtr)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehdf5_1abeed318faeb13380e1b4221bd4198bf1a757b528ff42a524a52ab439e7bb781ea" kindref="member">epics::pvData::uint32</ref><sp/>pixelsLength<sp/>=<sp/>pixelsPtr-&gt;getLength();</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>epics::pvData::shared_vector&lt;const<sp/>epics::pvData::uint32&gt;<sp/>pixelsData<sp/>=<sp/>pixelsPtr-&gt;view();</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehdf5_1abeed318faeb13380e1b4221bd4198bf1a757b528ff42a524a52ab439e7bb781ea" kindref="member">epics::pvData::uint32</ref><sp/>tofLength<sp/>=<sp/>tofPtr-&gt;getLength();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>epics::pvData::shared_vector&lt;const<sp/>epics::pvData::uint32&gt;<sp/>tofData<sp/>=<sp/>tofPtr-&gt;view();</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pixelsLength<sp/>!=<sp/>tofLength)<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>pixelsLength<sp/>!=<sp/>tofLength.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Count<sp/>events<sp/>to<sp/>calculate<sp/>event<sp/>rate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>m_eventsSinceLastUpdate<sp/>+=<sp/>pixelsLength;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!paused)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mappedPixelIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>epicsFloat64<sp/>tof<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>epicsUInt32<sp/>tofInt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>plotType<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tofBins<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>epicsUInt32<sp/>x_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>epicsUInt32<sp/>y_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tofIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>=0;<sp/><ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>&lt;pixelsLength;<sp/>++<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=numDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Dtermine<sp/>if<sp/>this<sp/>pixel<sp/>ID<sp/>is<sp/>in<sp/>this<sp/>DET<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pixelsData[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_detStartValues[det]))<sp/></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(pixelsData[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>&lt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_detEndValues[det])))<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Offset<sp/>pixel<sp/>ID<sp/>here<sp/>so<sp/>this<sp/>detector<sp/>pixel<sp/>ID<sp/>range<sp/>starts<sp/>at<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mappedPixelIndex<sp/>=<sp/>pixelsData[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>-<sp/>m_detStartValues[det];</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tof<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsFloat64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tofData[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>enabled,<sp/>do<sp/>TOF<sp/>tranformation<sp/>(to<sp/>d-space<sp/>for<sp/>example).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detTOFTransType[det]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tof<sp/>=<sp/>p_Transform[det]-&gt;<ref refid="class_a_dn_e_d_transform_1a7ed7692302b2338aa1117b45ddfcb8e4" kindref="member">calculate</ref>(m_detTOFTransType[det],<sp/>mappedPixelIndex,<sp/>tofData[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Apply<sp/>scale<sp/>and<sp/>offset.<sp/>This<sp/>is<sp/>used<sp/>to<sp/>rebin<sp/>into<sp/>the<sp/>available<sp/>TOF<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detTOFTransScale[det]<sp/>&gt;=0)<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tof<sp/>=<sp/>(tof<sp/>*<sp/>m_detTOFTransScale[det])<sp/>+<sp/>m_detTOFTransOffset[det];</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Do<sp/>pixel<sp/>ID<sp/>mapping<sp/>if<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detPixelMappingEnabled[det])<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m_PixelMapSize[det]<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(p_PixelMap[det]))<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mappedPixelIndex<sp/>=<sp/>(p_PixelMap[det])[pixelsData[<ref refid="namespacemake_adl_1a518a859cd4b1663659f1e61fc40a2d30" kindref="member">i</ref>]<sp/>-<sp/>m_detStartValues[det]];</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofInt<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(floor(tof));</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Read<sp/>type<sp/>of<sp/>2-D<sp/>plot<sp/>and<sp/>TOF<sp/>binning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDet2DTypeParam,<sp/>&amp;plotType);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetTOFNumBinsParam,<sp/>&amp;tofBins);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tofBins<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofBins<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tofBins)<sp/>&gt;<sp/>m_tofMax)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofBins<sp/>=<sp/>m_tofMax;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Integrate<sp/>Pixel<sp/>ID<sp/>Data,<sp/>optionally<sp/>filtering<sp/>on<sp/>TOF<sp/>ROI<sp/>filter<sp/>(for<sp/>X/Y<sp/>plot<sp/>only).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detTOFROIEnabled[det])<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tof<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsFloat64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_detTOFROIStartValues[det]))<sp/></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(tof<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsFloat64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_detTOFROIStartValues[det]<sp/>+<sp/>m_detTOFROISizeValues[det])))<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Data[m_NDArrayStartValues[det]+mappedPixelIndex]++;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//No<sp/>TOF<sp/>ROI<sp/>filter<sp/>enabled.<sp/>Choose<sp/>which<sp/>2-D<sp/>plot<sp/>to<sp/>produce.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(plotType)<sp/>==<sp/>s_ADNED_2D_PLOT_XY)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Standard<sp/>X/Y<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Data[m_NDArrayStartValues[det]+mappedPixelIndex]++;</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tof<sp/>&lt;=<sp/>m_tofMax)<sp/>&amp;&amp;<sp/>(tof<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(plotType)<sp/>==<sp/>s_ADNED_2D_PLOT_XTOF)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X/TOF<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_pos<sp/>=<sp/>mappedPixelIndex<sp/>%<sp/>m_detPixelSizeX[det];<sp/></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofIndex<sp/>=<sp/>(x_pos<sp/>*<sp/>tofBins)<sp/>+<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(floor(tof<sp/>/<sp/>(m_tofMax<sp/>/<sp/>tofBins)));<sp/></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(plotType)<sp/>==<sp/>s_ADNED_2D_PLOT_YTOF)<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y/TOF<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_pos<sp/>=<sp/>int(floor(mappedPixelIndex<sp/>/<sp/>m_detPixelSizeX[det]));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofIndex<sp/>=<sp/>(y_pos<sp/>*<sp/>tofBins)<sp/>+<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(floor(tof<sp/>/<sp/>(m_tofMax<sp/>/<sp/>tofBins)));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(plotType)<sp/>==<sp/>s_ADNED_2D_PLOT_PIXELIDTOF)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PixelID/TOF<sp/>plot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tofIndex<sp/>=<sp/>(mappedPixelIndex<sp/>*<sp/>tofBins)<sp/>+<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(floor(tof<sp/>/<sp/>(m_tofMax<sp/>/<sp/>tofBins)));</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tofIndex<sp/>&lt;<sp/>(m_detSizeValues[det]<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Data[m_NDArrayStartValues[det]<sp/>+<sp/>tofIndex]++;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Integrate<sp/>TOF/D-Space,<sp/>optionally<sp/>filtering<sp/>on<sp/>Pixel<sp/>ID<sp/>X/Y<sp/>ROI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((tof<sp/>&lt;=<sp/>m_tofMax)<sp/>&amp;&amp;<sp/>(tof<sp/>&gt;=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detPixelROIEnable[det])<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>pixel<sp/>mapping<sp/>is<sp/>not<sp/>enabled,<sp/>this<sp/>is<sp/>meaningless,<sp/>so<sp/>just<sp/>integrate<sp/>as<sp/>normal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_detPixelMappingEnabled[det])<sp/>{<sp/></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Data[m_NDArrayTOFStartValues[det]+tofInt]++;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Only<sp/>integrate<sp/>TOF<sp/>if<sp/>we<sp/>are<sp/>inside<sp/>pixel<sp/>ID<sp/>XY<sp/>ROI.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ROI<sp/>is<sp/>assumed<sp/>to<sp/>start<sp/>from<sp/>0,0<sp/>(not<sp/>from<sp/>whatever<sp/>is<sp/>the<sp/>pixel<sp/>ID<sp/>range).<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//So<sp/>we<sp/>need<sp/>to<sp/>offset,<sp/>but<sp/>this<sp/>has<sp/>already<sp/>been<sp/>done<sp/>by<sp/>the<sp/>pixel<sp/>mapping<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_detPixelSizeX[det]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((mappedPixelIndex<sp/>%<sp/>m_detPixelSizeX[det])<sp/>&gt;=<sp/>m_detPixelROIStartX[det])<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mappedPixelIndex<sp/>%<sp/>m_detPixelSizeX[det])<sp/>&lt;<sp/>(m_detPixelROIStartX[det]<sp/>+<sp/>m_detPixelROISizeX[det])))<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mappedPixelIndex<sp/>&gt;=<sp/>(m_detPixelROIStartY[det]<sp/>*<sp/>m_detPixelSizeX[det]))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mappedPixelIndex<sp/>&lt;<sp/>((m_detPixelROIStartY[det]<sp/>+<sp/>m_detPixelROISizeY[det])<sp/>*<sp/>m_detPixelSizeX[det]))))<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Data[m_NDArrayTOFStartValues[det]+tofInt]++;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Data[m_NDArrayTOFStartValues[det]+tofInt]++;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Count<sp/>events<sp/>to<sp/>calculate<sp/>event<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_detEventsSinceLastUpdate[det]++;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Count<sp/>total<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_detTotalEvents[det]++;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newPulse)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_pChargeInt<sp/>+=<sp/>pChargePtr-&gt;get();</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++m_pulseCounter;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Update<sp/>params<sp/>at<sp/>slower<sp/>rate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//There<sp/>is<sp/>only<sp/>one<sp/>timer<sp/>shared<sp/>between<sp/>channel<sp/>threads.<sp/>So<sp/>any<sp/>of<sp/>them<sp/>could<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>timer<sp/>and<sp/>be<sp/>responsible<sp/>for<sp/>posting<sp/>the<sp/>param<sp/>updates.<sp/>This<sp/>is<sp/>why<sp/>we<sp/>post<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>updates<sp/>for<sp/>all<sp/>the<sp/>channels<sp/>and<sp/>detectors<sp/>each<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventUpdate)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Channel<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chan=0;<sp/>chan&lt;numChan;<sp/>++chan)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDSeqCounterParam,<sp/>m_seqCounter[chan]);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDSeqIDParam,<sp/>m_seqID[chan]);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Other<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDPulseCounterParam,<sp/>m_pulseCounter);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventRate<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(floor(m_eventsSinceLastUpdate/timeDiffSecs));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDEventRateParam,<sp/>eventRate);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_eventsSinceLastUpdate<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=numDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventRate<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(floor(m_detEventsSinceLastUpdate[det]/timeDiffSecs));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetEventRateParam,<sp/>eventRate);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_detEventsSinceLastUpdate[det]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setDoubleParam(det,<sp/>ADnEDDetEventTotalParam,<sp/>m_detTotalEvents[det]);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setDoubleParam(ADnEDPChargeParam,<sp/>pChargePtr-&gt;get());</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setDoubleParam(ADnEDPChargeIntParam,<sp/>m_pChargeInt);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Callbacks<sp/>for<sp/>channel<sp/>and<sp/>det<sp/>related<sp/>parameters<sp/>(so<sp/>start<sp/>at<sp/>0<sp/>rather<sp/>than<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numChanOrDet<sp/>=<sp/><ref refid="mar3xx__pck_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(numChan,<sp/>numDet);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=0;<sp/>det&lt;=numChanOrDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks(det);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventDebug<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;channelID:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>channelID<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>pv_struct-&gt;dumpValue(cout);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal">asynStatus<sp/><ref refid="class_a_dn_e_d_1a4809a46a01de5350ef9a8c63ead53805" kindref="member">ADnED::allocArray</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>asynStatus<sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::allocArray&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_dataAlloc<sp/>!=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Nothing<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynSuccess;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>detSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tofMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>getIntegerParam(ADnEDNumDetParam,<sp/>&amp;numDet);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>getIntegerParam(ADnEDTOFMaxParam,<sp/>&amp;tofMax);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>m_tofMax<sp/>=<sp/>tofMax;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numDet<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>No<sp/>detectors.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>m_dataMaxSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=numDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumStartParam,<sp/>&amp;detStart);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumEndParam,<sp/>&amp;detEnd);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(det,<sp/>ADnEDDetPixelNumSizeParam,<sp/>&amp;detSize);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::allocArray:<sp/>det:<sp/>%d,<sp/>detStart:<sp/>%d,<sp/>detEnd:<sp/>%d,<sp/>detSize:<sp/>%d,<sp/>tofMax:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det,<sp/>detStart,<sp/>detEnd,<sp/>detSize,<sp/>tofMax);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Calculate<sp/>sizes<sp/>and<sp/>do<sp/>sanity<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detStart<sp/>&lt;=<sp/>detEnd)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>user<sp/>has<sp/>left<sp/>detSize<sp/>0,<sp/>just<sp/>set<sp/>equal<sp/>to<sp/>pixel<sp/>ID<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detSize<sp/>=<sp/>detEnd-detStart+1;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetPixelNumSizeParam,<sp/>detSize);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>detStart<sp/>&gt;<sp/>detEnd.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_FAIL);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::allocArray:<sp/>m_dataMaxSize:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>m_dataMaxSize);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::allocArray:<sp/>detSize:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>detSize);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetNDArrayStartParam,<sp/>m_dataMaxSize);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetNDArrayEndParam,<sp/>m_dataMaxSize+detSize-1);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetNDArraySizeParam,<sp/>detSize);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(det);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dataMaxSize<sp/>+=<sp/>detSize;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::allocArray:<sp/>final<sp/>m_dataMaxSize:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>m_dataMaxSize);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::allocArray:<sp/>TOF<sp/>Size:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>numDet<sp/>*<sp/>(tofMax+1));</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>tofStart<sp/>=<sp/>m_dataMaxSize;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>epicsUInt32<sp/>tofEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=numDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/>tofEnd<sp/>=<sp/>tofStart+tofMax;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ADnED::allocArray:<sp/>det<sp/>%d,<sp/>TOF<sp/>start:<sp/>%d,<sp/>TOF<sp/>end:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>det,<sp/>tofStart,<sp/>tofEnd);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetNDArrayTOFStartParam,<sp/>tofStart);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetNDArrayTOFEndParam,<sp/>tofEnd);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>tofStart<sp/>=<sp/>tofEnd+1;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(det);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Data)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>free(p_Data);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>p_Data<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_Data)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_dataMaxSize<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_bufferMaxSize<sp/>=<sp/>m_dataMaxSize+(numDet<sp/>*<sp/>(tofMax+1));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_Data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">epicsUInt32*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(calloc(m_bufferMaxSize,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsUInt32)));</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Not<sp/>allocating<sp/>zero<sp/>sized<sp/>array.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_FAIL);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>pData<sp/>already<sp/>allocated.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_FAIL);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_Data)<sp/>{</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>pData<sp/>failed<sp/>to<sp/>allocate.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_FAIL);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/>m_dataAlloc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDAllocSpaceStatusParam,<sp/>s_ADNED_ALLOC_STATUS_OK);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal">asynStatus<sp/><ref refid="class_a_dn_e_d_1adf510d01ec66f97ead176ec399b6189e" kindref="member">ADnED::clearParams</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>status<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::clearParams&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>((<ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDPulseCounterParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>((setDoubleParam(ADnEDPChargeParam,<sp/>0.0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>status<sp/>=<sp/>((setDoubleParam(ADnEDPChargeIntParam,<sp/>0.0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/>m_pChargeInt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>m_pulseCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Data<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(p_Data,<sp/>0,<sp/>m_bufferMaxSize*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsUInt32));</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chan=0;<sp/>chan&lt;s_ADNED_MAX_CHANNELS;<sp/>++chan)<sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>((<ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDSeqCounterParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>((<ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDSeqIDParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>((<ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDSeqIDMissingParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>((<ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDSeqIDNumMissingParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>((<ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(chan,<sp/>ADnEDBadTimeStampParam,<sp/>0)<sp/>==<sp/>asynSuccess)<sp/>&amp;&amp;<sp/>status);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>m_seqCounter[chan]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>m_seqID[chan]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>m_lastSeqID[chan]<sp/>=<sp/>-1;<sp/><sp/></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>m_TimeStamp[chan].put(0,0);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>m_TimeStampLast[chan].put(0,0);</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(chan);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=0;<sp/>det&lt;=s_ADNED_MAX_DETS;<sp/>++det)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>m_detTotalEvents[det]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>setDoubleParam(det,<sp/>ADnEDDetEventTotalParam,<sp/>m_detTotalEvents[det]);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks(det);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Failed<sp/>to<sp/>clear<sp/>params.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynError;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynSuccess;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d_1af03077e4cbf15b0f87276964e9571074" kindref="member">ADnED::eventTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>epicsEventWaitStatus<sp/>eventStatus;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/>epicsFloat64<sp/>timeout<sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acquire<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numChannels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pvName[s_ADNED_MAX_CHANNELS][s_ADNED_MAX_STRING_SIZE]<sp/>=<sp/>{{0}};</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::eventTask&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Started<sp/>Event<sp/>Thread.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>setStringParam(<ref refid="class_a_d_driver_1af8ca049bdf54eede6611e50a284152bc" kindref="member">ADStatusMessage</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Startup&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>a<sp/>stop<sp/>event,<sp/>with<sp/>a<sp/>short<sp/>timeout,<sp/>to<sp/>catch<sp/>any<sp/>that<sp/>were<sp/>done<sp/>after<sp/>last<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>epicsEventWaitWithTimeout(m_stopEvent,<sp/>timeout);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)<sp/>{</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Got<sp/>Stop<sp/>Event<sp/>Before<sp/>Start<sp/>Event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="classasyn_n_d_array_driver_1aa06c19f650b4619a7bdbf3a79397c3d3" kindref="member">ADAcquire</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)<sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setStringParam(<ref refid="class_a_d_driver_1af8ca049bdf54eede6611e50a284152bc" kindref="member">ADStatusMessage</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Idle&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>epicsEventWait(m_startEvent);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)<sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Got<sp/>start<sp/>event.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Got<sp/>Start<sp/>Event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>number<sp/>of<sp/>required<sp/>active<sp/>PVAccess<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numChannels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getIntegerParam(ADnEDNumChannelsParam,<sp/>&amp;numChannels);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numChannels<sp/>&gt;<sp/>s_ADNED_MAX_CHANNELS)<sp/>{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numChannels<sp/>=<sp/>s_ADNED_MAX_CHANNELS;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_a_dn_e_d_1a4809a46a01de5350ef9a8c63ead53805" kindref="member">allocArray</ref>()<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStringParam(<ref refid="class_a_d_driver_1af8ca049bdf54eede6611e50a284152bc" kindref="member">ADStatusMessage</ref>,<sp/></highlight><highlight class="stringliteral">&quot;allocArray<sp/>Error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Failed<sp/>to<sp/>allocate<sp/>array.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Clear<sp/>arrays<sp/>at<sp/>start<sp/>of<sp/>acquire<sp/>every<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Data<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(p_Data,<sp/>0,<sp/>m_bufferMaxSize*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsUInt32));</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="class_a_d_driver_1a6a532aae0f51273450f4e897bf0aed1d" kindref="member">ADStatus</ref>,<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea197b4bb1a794d6799db204a5dec4fbd2" kindref="member">ADStatusAcquire</ref>);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStringParam(<ref refid="class_a_d_driver_1af8ca049bdf54eede6611e50a284152bc" kindref="member">ADStatusMessage</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Acquiring<sp/>Events&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>frame<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Send<sp/>start<sp/>frame&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsEventSignal(this-&gt;m_startFrame);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Read<sp/>the<sp/>PV<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chan=0;<sp/>chan&lt;numChannels;<sp/>++chan)<sp/>{</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getStringParam(chan,<sp/>ADnEDPVNameParam,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pvName[chan]),<sp/>pvName[chan]);</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Connect<sp/>channel<sp/>here<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel=0;<sp/>channel&lt;numChannels;<sp/>++channel)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pvName[channel][0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setupChannelMonitor(pvName[channel],<sp/>channel)<sp/>!=<sp/>asynSuccess)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Unknown<sp/>error<sp/>from<sp/>setupChannelMonitor.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/><sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Problem<sp/>creating<sp/>monitor.<sp/>Exception:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functionName,<sp/>e.what());</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStringParam(<ref refid="class_a_d_driver_1af8ca049bdf54eede6611e50a284152bc" kindref="member">ADStatusMessage</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>To<sp/>Connect<sp/>To<sp/>PV.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="class_a_d_driver_1a6a532aae0f51273450f4e897bf0aed1d" kindref="member">ADStatus</ref>,<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea4f0778c31f69985dab4e84a0d9cb1cf2" kindref="member">ADStatusError</ref>);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel=0;<sp/>channel&lt;numChannels;<sp/>++channel)<sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Monitor[channel])<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Monitor[channel]-&gt;start();</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Send<sp/>Stop<sp/>Frame&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsEventSignal(this-&gt;m_stopFrame);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>if<sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>we<sp/>failed<sp/>to<sp/>connect<sp/>or<sp/>setup,<sp/>notify<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)<sp/>{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="class_a_d_driver_1a6a532aae0f51273450f4e897bf0aed1d" kindref="member">ADStatus</ref>,<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72ea4f0778c31f69985dab4e84a0d9cb1cf2" kindref="member">ADStatusError</ref>);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Complete<sp/>Start<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDStartParam,<sp/>0);</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(acquire)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>a<sp/>stop<sp/>event,<sp/>with<sp/>a<sp/>short<sp/>timeout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//eventStatus<sp/>=<sp/>epicsEventWaitWithTimeout(m_stopEvent,<sp/>timeout);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>epicsEventWaitWithTimeout(m_stopEvent,<sp/>0.1);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>stop<sp/>event&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Got<sp/>Stop<sp/>Event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!acquire)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="class_a_d_driver_1a6a532aae0f51273450f4e897bf0aed1d" kindref="member">ADStatus</ref>,<sp/><ref refid="_a_d_driver_8h_1a69820e97c7282152e222297a6d36f72eae5aabf2281b95d16f607f1a7b1c5a8bd" kindref="member">ADStatusIdle</ref>);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Send<sp/>Stop<sp/>Frame&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsEventSignal(this-&gt;m_stopFrame);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>while(acquire)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Stop<sp/>monitor<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel=0;<sp/>channel&lt;numChannels;<sp/>++channel)<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Monitor[channel])<sp/>{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_Monitor[channel]-&gt;stop();</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Zero<sp/>the<sp/>event<sp/>rate<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numDet<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>getIntegerParam(ADnEDNumDetParam,<sp/>&amp;numDet);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDEventRateParam,<sp/>0);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>det=1;<sp/>det&lt;=numDet;<sp/>det++)<sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(det,<sp/>ADnEDDetEventRateParam,<sp/>0);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks(det);</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Complete<sp/>Stop<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(ADnEDStopParam,<sp/>0);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>while(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Exiting<sp/>ADnEDEventTask<sp/>main<sp/>loop.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="comment">//Global<sp/>C<sp/>utility<sp/>functions<sp/>to<sp/>tie<sp/>in<sp/>with<sp/>EPICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnEDEventTaskC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*drvPvt)</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><ref refid="class_a_dn_e_d" kindref="compound">ADnED</ref><sp/>*pPvt<sp/>=<sp/>(<ref refid="class_a_dn_e_d" kindref="compound">ADnED</ref><sp/>*)drvPvt;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>pPvt-&gt;<ref refid="class_a_dn_e_d_1af03077e4cbf15b0f87276964e9571074" kindref="member">eventTask</ref>();</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal">asynStatus<sp/>ADnED::setupChannelMonitor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pvName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>connectStatus<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>newMonitor<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::setupChannelMonitor&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s.<sp/>PV<sp/>Name:<sp/>%s,<sp/>Channel:<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>functionName,<sp/>pvName,<sp/>channel);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PV<sp/>Name:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pvName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Channel:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>channel<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channel<sp/>&gt;=<sp/>s_ADNED_MAX_CHANNELS)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;channel<sp/>&gt;=<sp/>s_ADNED_MAX_CHANNELS.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!p_ChannelRequester)<sp/>||<sp/>(!p_MonitorRequester))<sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>Channel<sp/>or<sp/>Monitor<sp/>Requester.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_ChannelProvider)<sp/>{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>p_ChannelProvider<sp/>=<sp/>epics::pvAccess::getChannelProviderRegistry()-&gt;getProvider(<ref refid="_a_dn_e_d_globals_8h_1a96d1c03c5c46d612513b53a7085efc08" kindref="member">ADNED_PV_PROVIDER</ref>);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_ChannelProvider)<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;No<sp/>Channel<sp/>Provider.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_Channel[channel])<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>p_Channel[channel]<sp/>=<sp/>(shared_ptr&lt;epics::pvAccess::Channel&gt;)</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(p_ChannelProvider-&gt;createChannel(pvName,<sp/>p_ChannelRequester,<sp/><ref refid="_a_dn_e_d_globals_8h_1ad74db2a76a263890f6a0d6e97367a681" kindref="member">ADNED_PV_PRIORITY</ref>));</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>connectStatus<sp/>=<sp/>p_ChannelRequester-&gt;waitUntilConnected(<ref refid="_a_dn_e_d_globals_8h_1a6101f3c36d9676533467e659bbb3fbba" kindref="member">ADNED_PV_TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehdf5_1abeed318faeb13380e1b4221bd4198bf1aea271040d7a5b8d9af9cbf6564d262d5" kindref="member">std::string</ref><sp/>channelName(p_Channel[channel]-&gt;getChannelName());</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(channelName<sp/>!=<sp/>pvName)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_Channel[channel]-&gt;destroy();</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_Channel[channel]<sp/>=<sp/>(shared_ptr&lt;epics::pvAccess::Channel&gt;)</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_ChannelProvider-&gt;createChannel(pvName,<sp/>p_ChannelRequester,<sp/><ref refid="_a_dn_e_d_globals_8h_1ad74db2a76a263890f6a0d6e97367a681" kindref="member">ADNED_PV_PRIORITY</ref>));</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>connectStatus<sp/>=<sp/>p_ChannelRequester-&gt;waitUntilConnected(<ref refid="_a_dn_e_d_globals_8h_1a6101f3c36d9676533467e659bbb3fbba" kindref="member">ADNED_PV_TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newMonitor<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>connectStatus<sp/>=<sp/>p_Channel[channel]-&gt;isConnected();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!connectStatus)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Timeout<sp/>connecting<sp/>to<sp/>PV&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!p_Monitor[channel])<sp/>||<sp/>(newMonitor))<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_Monitor[channel])<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p_Monitor[channel]-&gt;destroy();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_ptr&lt;epics::pvData::PVStructure&gt;<sp/>pvRequest<sp/>=<sp/>epics::pvData::CreateRequest::create()-&gt;createRequest(<ref refid="_a_dn_e_d_globals_8h_1ad69238322a03154c905da3b1201541f4" kindref="member">ADNED_PV_REQUEST</ref>);</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>p_Monitor[channel]<sp/>=<sp/>p_Channel[channel]-&gt;createMonitor(p_MonitorRequester[channel],<sp/>pvRequest);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>p_MonitorRequester[channel]-&gt;waitUntilConnected(<ref refid="_a_dn_e_d_globals_8h_1a6101f3c36d9676533467e659bbb3fbba" kindref="member">ADNED_PV_TIMEOUT</ref>);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>asynSuccess;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d_1a7159453bdd7dbc6fb2551259cf09220d" kindref="member">ADnED::frameTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/>epicsEventWaitStatus<sp/>eventStatus;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>epicsFloat64<sp/>timeout<sp/>=<sp/>0.001;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arrayCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arrayCallbacks<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/>epicsFloat64<sp/>updatePeriod<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>epicsTimeStamp<sp/>nowTime;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><ref refid="class_n_d_array" kindref="compound">NDArray</ref><sp/>*pNDArray<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ADnED::frameTask&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Started<sp/>Frame<sp/>Thread.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>a<sp/>stop<sp/>event,<sp/>with<sp/>a<sp/>short<sp/>timeout,<sp/>to<sp/>catch<sp/>any<sp/>that<sp/>were<sp/>done<sp/>during<sp/>last<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>epicsEventWaitWithTimeout(m_stopFrame,<sp/>0.01);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>lock();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)<sp/>{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Got<sp/>Stop<sp/>Frame<sp/>Event<sp/>Before<sp/>Start<sp/>Frame<sp/>Event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>epicsEventWait(m_startFrame);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>lock();<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>start<sp/>frame&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Got<sp/>Start<sp/>Frame<sp/>Event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arrayCounter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="classasyn_n_d_array_driver_1abec5f5fc9922549d745d7dc7f19243ea" kindref="member">NDArrayCounter</ref>,<sp/>arrayCounter);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setIntegerParam(ADnEDFrameStatus,<sp/>ADStatusAcquire);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//setStringParam(ADnEDFrameStatusMessage,<sp/>&quot;Acquiring<sp/>Frames&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(acquire)<sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Get<sp/>the<sp/>update<sp/>period.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>getDoubleParam(ADnEDFrameUpdatePeriodParam,<sp/>&amp;updatePeriod);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>=<sp/>updatePeriod<sp/>/<sp/>1000.0;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Wait<sp/>for<sp/>a<sp/>stop<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlock();</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eventStatus<sp/>=<sp/>epicsEventWaitWithTimeout(m_stopFrame,<sp/>timeout);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(eventStatus<sp/>==<sp/>epicsEventWaitOK)<sp/>{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>Stop<sp/>Frame&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Got<sp/>Stop<sp/>Frame<sp/>Event.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acquire<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acquire)<sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>p_Data<sp/>here<sp/>into<sp/>an<sp/>NDArray<sp/>of<sp/>the<sp/>same<sp/>size.<sp/>Do<sp/>array<sp/>callbacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getIntegerParam(<ref refid="classasyn_n_d_array_driver_1af2354f73acece6ee2427f5069b16fdb5" kindref="member">NDArrayCallbacks</ref>,<sp/>&amp;arrayCallbacks);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arrayCallbacks)<sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++arrayCounter;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dims[1]<sp/>=<sp/>{m_bufferMaxSize};</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pNDArray<sp/>=<sp/>this-&gt;<ref refid="classasyn_n_d_array_driver_1ad3969854a37329ef4061cc560e9022dc" kindref="member">pNDArrayPool</ref>-&gt;<ref refid="class_n_d_array_pool_1a26b4360694655c4af6c853c2f3d2ce5e" kindref="member">alloc</ref>(1,<sp/>dims,<sp/><ref refid="_n_d_attribute_8h_1a34b835bcabc3b7f546f4b25c5767cb16a0492c093c2dcd6eebcaf15f57a2f359a" kindref="member">NDUInt32</ref>,<sp/>0,<sp/>NULL))<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>pNDArrayPool-&gt;alloc<sp/>failed.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epicsTimeGetCurrent(&amp;nowTime);</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pNDArray-&gt;<ref refid="class_n_d_array_1a62f165653bd0099f31b3d276bdb81d3c" kindref="member">uniqueId</ref><sp/>=<sp/>arrayCounter;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pNDArray-&gt;<ref refid="class_n_d_array_1ac449943846ba4c5c18aa1ca5559470c2" kindref="member">timeStamp</ref><sp/>=<sp/>nowTime.secPastEpoch<sp/>+<sp/>nowTime.nsec<sp/>/<sp/>1.e9;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pNDArray-&gt;<ref refid="class_n_d_array_1af5aad7b41118f465621cf045ed957469" kindref="member">pAttributeList</ref>-&gt;<ref refid="class_n_d_attribute_list_1aa86fbdd59e20b734b86b2464f470d752" kindref="member">add</ref>(</highlight><highlight class="stringliteral">&quot;TIMESTAMP&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Host<sp/>Timestamp&quot;</highlight><highlight class="normal">,<sp/><ref refid="_n_d_attribute_8h_1a8a795995acde8458f43ac9b01376ef07a44ee1de8f62f1aca30ce498b093a5c8c" kindref="member">NDAttrFloat64</ref>,<sp/>&amp;(pNDArray-&gt;<ref refid="class_n_d_array_1ac449943846ba4c5c18aa1ca5559470c2" kindref="member">timeStamp</ref>));</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock();</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(pNDArray-&gt;<ref refid="class_n_d_array_1a9581f9d8f38225a2c2977bbed70fa2b8" kindref="member">pData</ref>,<sp/>p_Data,<sp/>m_bufferMaxSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(epicsUInt32));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_FLOW,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>Calling<sp/>NDArray<sp/>callback\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doCallbacksGenericPointer(pNDArray,<sp/><ref refid="classasyn_n_d_array_driver_1a2b2fe51fba9a6ee4146813eac0c47fd1" kindref="member">NDArrayData</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Free<sp/>the<sp/>NDArray<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pNDArray-&gt;<ref refid="class_n_d_array_1a0c4c61ea4d44ce97db979d24305c996e" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classasyn_n_d_array_driver_1abf87462bc5853f8e5a56db5e93acd956" kindref="member">setIntegerParam</ref>(<ref refid="classasyn_n_d_array_driver_1abec5f5fc9922549d745d7dc7f19243ea" kindref="member">NDArrayCounter</ref>,<sp/>arrayCounter);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callParamCallbacks();</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>while(acquire)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>while(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>asynPrint(this-&gt;pasynUserSelf,<sp/>ASYN_TRACE_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;%s:<sp/>ERROR:<sp/>Exiting<sp/>ADnEDFrameTask<sp/>main<sp/>loop.\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">//Global<sp/>C<sp/>utility<sp/>functions<sp/>to<sp/>tie<sp/>in<sp/>with<sp/>EPICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnEDFrameTaskC(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*drvPvt)</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><ref refid="class_a_dn_e_d" kindref="compound">ADnED</ref><sp/>*pPvt<sp/>=<sp/>(<ref refid="class_a_dn_e_d" kindref="compound">ADnED</ref><sp/>*)drvPvt;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>pPvt-&gt;<ref refid="class_a_dn_e_d_1a7159453bdd7dbc6fb2551259cf09220d" kindref="member">frameTask</ref>();</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="comment">/*************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>asynStatus<sp/><ref refid="_a_dn_e_d_8cpp_1a28637cb7c3e2f68a18a7ed61b1441daf" kindref="member">ADnEDConfig</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*portName,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxBuffers,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxMemory,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>debug)</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/>asynStatus<sp/>status<sp/>=<sp/>asynSuccess;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Instantiate<sp/>class.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d" kindref="compound">ADnED</ref>(portName,<sp/>maxBuffers,<sp/>maxMemory,<sp/>debug);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>exception<sp/>caught<sp/>when<sp/>trying<sp/>to<sp/>construct<sp/>ADnED.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>asynError;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(status);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>asynStatus<sp/><ref refid="_a_dn_e_d_8cpp_1ae955e86f28528f8c57867626eab4ce4c" kindref="member">ADnEDCreateFactory</ref>()</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Instantiate<sp/>factory.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_a_dn_e_d_1a70391a3f618b663e48303850020ee5e2" kindref="member">ADnED::createFactory</ref>();</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Code<sp/>for<sp/>iocsh<sp/>registration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>ADnEDConfig<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>ADnEDConfigArg0<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Port<sp/>name&quot;</highlight><highlight class="normal">,<sp/>iocshArgString};</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>ADnEDConfigArg1<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Max<sp/>Buffers&quot;</highlight><highlight class="normal">,<sp/>iocshArgInt};</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>ADnEDConfigArg2<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Max<sp/>Memory&quot;</highlight><highlight class="normal">,<sp/>iocshArgInt};</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>ADnEDConfigArg3<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;Debug&quot;</highlight><highlight class="normal">,<sp/>iocshArgInt};</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ADnEDConfigArgs[]<sp/>=<sp/><sp/>{&amp;ADnEDConfigArg0,</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ADnEDConfigArg1,</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ADnEDConfigArg2,</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;ADnEDConfigArg3};</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshFuncDef<sp/>configADnED<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;ADnEDConfig&quot;</highlight><highlight class="normal">,<sp/>4,<sp/>ADnEDConfigArgs};</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>configADnEDCallFunc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArgBuf<sp/>*args)</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_dn_e_d_8cpp_1a28637cb7c3e2f68a18a7ed61b1441daf" kindref="member">ADnEDConfig</ref>(args[0].sval,<sp/>args[1].ival,<sp/>args[2].ival,<sp/>args[3].ival);</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshFuncDef<sp/>configADnEDCreateFactory<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;ADnEDCreateFactory&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>NULL};</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>configADnEDCreateFactoryCallFunc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArgBuf<sp/>*args)</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_dn_e_d_8cpp_1ae955e86f28528f8c57867626eab4ce4c" kindref="member">ADnEDCreateFactory</ref>();</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ADnEDRegister(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/>iocshRegister(&amp;configADnED,<sp/>configADnEDCallFunc);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/>iocshRegister(&amp;configADnEDCreateFactory,<sp/>configADnEDCreateFactoryCallFunc);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><ref refid="_a_dn_e_d_8cpp_1a35a7a730655af25228c04bb00f1002da" kindref="member">epicsExportRegistrar</ref>(ADnEDRegister);</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment">/****************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/areaDetector/areaDetector/ADnED/ADnEDApp/src/ADnED.cpp"/>
  </compounddef>
</doxygen>
