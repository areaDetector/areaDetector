<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="parse_area_prefixes_8c" kind="file" language="C++">
    <compoundname>parseAreaPrefixes.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">iocsh.h</includes>
    <includes local="no">dbAccess.h</includes>
    <includes local="no">dbStaticLib.h</includes>
    <includes local="yes">epicsExport.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c</label>
        <link refid="parse_area_prefixes_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>dbAccess.h</label>
      </node>
      <node id="6">
        <label>dbStaticLib.h</label>
      </node>
      <node id="7">
        <label>epicsExport.h</label>
      </node>
      <node id="4">
        <label>iocsh.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="parse_area_prefixes_8c_1aaea586a9a38bb9298b254cd1083b61b5" prot="public" static="yes" mutable="no">
        <type>const iocshArg</type>
        <definition>const iocshArg parseArg0</definition>
        <argsstring></argsstring>
        <name>parseArg0</name>
        <initializer>= {&quot;waveformName&quot;, iocshArgString}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="74" column="23" bodyfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="variable" id="parse_area_prefixes_8c_1a964ad9c9f10509526821a163b5aadf74" prot="public" static="yes" mutable="no">
        <type>const iocshArg *</type>
        <definition>const iocshArg* parseArgs[]</definition>
        <argsstring>[]</argsstring>
        <name>parseArgs</name>
        <initializer>= { &amp;parseArg0 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="75" column="23" bodyfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="variable" id="parse_area_prefixes_8c_1aa6cf7e748a874b796a712910d6248a50" prot="public" static="yes" mutable="no">
        <type>const iocshFuncDef</type>
        <definition>const iocshFuncDef parseFuncDef</definition>
        <argsstring></argsstring>
        <name>parseFuncDef</name>
        <initializer>= {&quot;parseAreaPrefixes&quot;, 1, parseArgs}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="76" column="27" bodyfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" bodystart="76" bodyend="76"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="parse_area_prefixes_8c_1a720eaf2503b1dc6464ec34b2214a50ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parseAreaPrefixes</definition>
        <argsstring>(char *waveformName)</argsstring>
        <name>parseAreaPrefixes</name>
        <param>
          <type>char *</type>
          <declname>waveformName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>get the channel for the waveform</para>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="19" column="6" bodyfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" bodystart="19" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="parse_area_prefixes_8c_1a62a104b2bd39758a130e9a85dd8de6b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parseCallFunc</definition>
        <argsstring>(const iocshArgBuf *args)</argsstring>
        <name>parseCallFunc</name>
        <param>
          <type>const iocshArgBuf *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="79" column="13" bodyfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="parse_area_prefixes_8c_1ae19585a31abbd5232b1845023f017e8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parseRegister</definition>
        <argsstring>(void)</argsstring>
        <name>parseRegister</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="84" column="13" bodyfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="parse_area_prefixes_8c_1a23c752252381e8b789b83a209e703d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>epicsExportRegistrar</definition>
        <argsstring>(parseRegister)</argsstring>
        <name>epicsExportRegistrar</name>
        <param>
          <type>parseRegister</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" line="88" column="1" declfile="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c" declline="88" declcolumn="1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>parseAreaPrefixes.c</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>\author<sp/>John<sp/>Hammonds</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>\author<sp/>Argonne<sp/>National<sp/>Laboratory</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>\date<sp/>May<sp/>20,<sp/>2010</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Parse<sp/>through<sp/>asyn<sp/>records,<sp/>find<sp/>the<sp/>ones<sp/>that<sp/>contain<sp/>an<sp/>ADType<sp/>info<sp/>field.<sp/><sp/>Concatenate<sp/>a<sp/>list<sp/>of<sp/>channel<sp/>prefixes<sp/>for<sp/>these</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>and<sp/>write<sp/>this<sp/>to<sp/>a<sp/>waveform<sp/>record.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iocsh.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbAccess.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dbStaticLib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epicsExport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parse_area_prefixes_8c_1a720eaf2503b1dc6464ec34b2214a50ce" kindref="member">parseAreaPrefixes</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*waveformName)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*functionName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;parseAreaPrefixes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>inBuffer[128];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outBuffer[2048];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>waveformNameFull[128];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*indexPtr;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFound;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>foundLen;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>DBADDR<sp/>dbaddr;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>DBADDR<sp/>*pdbaddr<sp/>=<sp/>&amp;dbaddr;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>DBENTRY<sp/>dbentry;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>DBENTRY<sp/>*pdbentry<sp/>=<sp/>&amp;dbentry;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pdbbase)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s:<sp/>No<sp/>database<sp/>loaded\n&quot;</highlight><highlight class="normal">,<sp/>functionName);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>nFound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>outBuffer[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>dbInitEntry(pdbbase,<sp/>pdbentry);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>dbFindRecordType(pdbentry,<sp/></highlight><highlight class="stringliteral">&quot;asyn&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status=dbFirstRecord(pdbentry);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(inBuffer,<sp/>dbGetRecordName(pdbentry));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>dbFindInfo(pdbentry,<sp/></highlight><highlight class="stringliteral">&quot;ADType&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!status)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFound<sp/>!=<sp/>0){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(<sp/>outBuffer,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexPtr<sp/>=<sp/>strstr(inBuffer,<sp/></highlight><highlight class="stringliteral">&quot;AsynIO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundLen<sp/>=<sp/>indexPtr<sp/>-<sp/>inBuffer;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncat(<sp/>outBuffer,<sp/>inBuffer,<sp/>foundLen);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFound++;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/>dbNextRecord(pdbentry);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>dbFinishEntry(pdbentry);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf<sp/>(<sp/>waveformNameFull,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>waveformName);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>dbNameToAddr(<sp/>waveformName,<sp/>pdbaddr);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dbPutField(pdbaddr,<sp/>DBR_UCHAR,<sp/>outBuffer,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)strlen(outBuffer));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>find<sp/>channel<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>waveformName);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>information<sp/>needed<sp/>by<sp/>iocsh<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>parseArg0<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;waveformName&quot;</highlight><highlight class="normal">,<sp/>iocshArgString};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArg<sp/>*parseArgs[]<sp/>=<sp/>{<sp/>&amp;parseArg0<sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshFuncDef<sp/>parseFuncDef<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;parseAreaPrefixes&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>parseArgs};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Wrapper<sp/>called<sp/>by<sp/>iocsh,<sp/>select<sp/>the<sp/>argumentTypes<sp/>that<sp/>parseAreaFixes<sp/>needs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseCallFunc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iocshArgBuf<sp/>*<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parse_area_prefixes_8c_1a720eaf2503b1dc6464ec34b2214a50ce" kindref="member">parseAreaPrefixes</ref>(<sp/>args[0].sval);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*Registration<sp/>routine,<sp/>runs<sp/>at<sp/>startup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parseRegister(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>iocshRegister(&amp;parseFuncDef,<sp/>parseCallFunc);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="parse_area_prefixes_8c_1a23c752252381e8b789b83a209e703d5b" kindref="member">epicsExportRegistrar</ref>(parseRegister);</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/areaDetector/areaDetector/ADCore/ADApp/ADSrc/parseAreaPrefixes.c"/>
  </compounddef>
</doxygen>
